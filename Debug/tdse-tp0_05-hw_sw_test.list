
tdse-tp0_05-hw_sw_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08003504  08003504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800385c  0800385c  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800385c  0800385c  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800385c  0800385c  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08003864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  200000bc  08003920  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08003920  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba66  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e98  00000000  00000000  0002bb4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0002d9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  0002e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001867d  00000000  00000000  0002e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a00e  00000000  00000000  00046d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082f6f  00000000  00000000  00050d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3cda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000262c  00000000  00000000  000d3d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	080034ec 	.word	0x080034ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	080034ec 	.word	0x080034ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000160:	f001 ffbe 	bl	80020e0 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 f9ec 	bl	8000540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f809 	bl	800017e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f872 	bl	8000254 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f846 	bl	8000200 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Application Init */
  app_init();
 8000174:	f001 fa18 	bl	80015a8 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  app_update();
 8000178:	f001 fabc 	bl	80016f4 <app_update>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	; 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	; 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f002 fa18 	bl	80025c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b0:	2300      	movs	r3, #0
 80001b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fd06 	bl	8000bd0 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001ca:	f000 f8b1 	bl	8000330 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2102      	movs	r1, #2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 ff71 	bl	80010d0 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f4:	f000 f89c 	bl	8000330 <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	; 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000204:	4b11      	ldr	r3, [pc, #68]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000206:	4a12      	ldr	r2, [pc, #72]	; (8000250 <MX_USART2_UART_Init+0x50>)
 8000208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800020a:	4b10      	ldr	r3, [pc, #64]	; (800024c <MX_USART2_UART_Init+0x4c>)
 800020c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000214:	2200      	movs	r2, #0
 8000216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <MX_USART2_UART_Init+0x4c>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000220:	2200      	movs	r2, #0
 8000222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000226:	220c      	movs	r2, #12
 8000228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <MX_USART2_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000236:	4805      	ldr	r0, [pc, #20]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000238:	f001 f8d8 	bl	80013ec <HAL_UART_Init>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000242:	f000 f875 	bl	8000330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	200001d4 	.word	0x200001d4
 8000250:	40004400 	.word	0x40004400

08000254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000268:	4b2d      	ldr	r3, [pc, #180]	; (8000320 <MX_GPIO_Init+0xcc>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a2c      	ldr	r2, [pc, #176]	; (8000320 <MX_GPIO_Init+0xcc>)
 800026e:	f043 0310 	orr.w	r3, r3, #16
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b2a      	ldr	r3, [pc, #168]	; (8000320 <MX_GPIO_Init+0xcc>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0310 	and.w	r3, r3, #16
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000280:	4b27      	ldr	r3, [pc, #156]	; (8000320 <MX_GPIO_Init+0xcc>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a26      	ldr	r2, [pc, #152]	; (8000320 <MX_GPIO_Init+0xcc>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b24      	ldr	r3, [pc, #144]	; (8000320 <MX_GPIO_Init+0xcc>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0320 	and.w	r3, r3, #32
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000298:	4b21      	ldr	r3, [pc, #132]	; (8000320 <MX_GPIO_Init+0xcc>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a20      	ldr	r2, [pc, #128]	; (8000320 <MX_GPIO_Init+0xcc>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <MX_GPIO_Init+0xcc>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0304 	and.w	r3, r3, #4
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b0:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <MX_GPIO_Init+0xcc>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a1a      	ldr	r2, [pc, #104]	; (8000320 <MX_GPIO_Init+0xcc>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <MX_GPIO_Init+0xcc>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0308 	and.w	r3, r3, #8
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2120      	movs	r1, #32
 80002cc:	4815      	ldr	r0, [pc, #84]	; (8000324 <MX_GPIO_Init+0xd0>)
 80002ce:	f000 fc2b 	bl	8000b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002d8:	4b13      	ldr	r3, [pc, #76]	; (8000328 <MX_GPIO_Init+0xd4>)
 80002da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002dc:	2300      	movs	r3, #0
 80002de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002e0:	f107 0310 	add.w	r3, r7, #16
 80002e4:	4619      	mov	r1, r3
 80002e6:	4811      	ldr	r0, [pc, #68]	; (800032c <MX_GPIO_Init+0xd8>)
 80002e8:	f000 fa9a 	bl	8000820 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002ec:	2320      	movs	r3, #32
 80002ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f0:	2301      	movs	r3, #1
 80002f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f8:	2302      	movs	r3, #2
 80002fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002fc:	f107 0310 	add.w	r3, r7, #16
 8000300:	4619      	mov	r1, r3
 8000302:	4808      	ldr	r0, [pc, #32]	; (8000324 <MX_GPIO_Init+0xd0>)
 8000304:	f000 fa8c 	bl	8000820 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000308:	2200      	movs	r2, #0
 800030a:	2100      	movs	r1, #0
 800030c:	2028      	movs	r0, #40	; 0x28
 800030e:	f000 fa50 	bl	80007b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000312:	2028      	movs	r0, #40	; 0x28
 8000314:	f000 fa69 	bl	80007ea <HAL_NVIC_EnableIRQ>

}
 8000318:	bf00      	nop
 800031a:	3720      	adds	r7, #32
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40021000 	.word	0x40021000
 8000324:	40010800 	.word	0x40010800
 8000328:	10110000 	.word	0x10110000
 800032c:	40011000 	.word	0x40011000

08000330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000334:	b672      	cpsid	i
}
 8000336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000338:	e7fe      	b.n	8000338 <Error_Handler+0x8>
	...

0800033c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <HAL_MspInit+0x5c>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a14      	ldr	r2, [pc, #80]	; (8000398 <HAL_MspInit+0x5c>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b12      	ldr	r3, [pc, #72]	; (8000398 <HAL_MspInit+0x5c>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <HAL_MspInit+0x5c>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <HAL_MspInit+0x5c>)
 8000360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000364:	61d3      	str	r3, [r2, #28]
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <HAL_MspInit+0x5c>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <HAL_MspInit+0x60>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	4a04      	ldr	r2, [pc, #16]	; (800039c <HAL_MspInit+0x60>)
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	40021000 	.word	0x40021000
 800039c:	40010000 	.word	0x40010000

080003a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b088      	sub	sp, #32
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a15      	ldr	r2, [pc, #84]	; (8000410 <HAL_UART_MspInit+0x70>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d123      	bne.n	8000408 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <HAL_UART_MspInit+0x74>)
 80003c2:	69db      	ldr	r3, [r3, #28]
 80003c4:	4a13      	ldr	r2, [pc, #76]	; (8000414 <HAL_UART_MspInit+0x74>)
 80003c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ca:	61d3      	str	r3, [r2, #28]
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <HAL_UART_MspInit+0x74>)
 80003ce:	69db      	ldr	r3, [r3, #28]
 80003d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <HAL_UART_MspInit+0x74>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a0d      	ldr	r2, [pc, #52]	; (8000414 <HAL_UART_MspInit+0x74>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <HAL_UART_MspInit+0x74>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0304 	and.w	r3, r3, #4
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003f0:	230c      	movs	r3, #12
 80003f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003f4:	2302      	movs	r3, #2
 80003f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f8:	2302      	movs	r3, #2
 80003fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	4619      	mov	r1, r3
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <HAL_UART_MspInit+0x78>)
 8000404:	f000 fa0c 	bl	8000820 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000408:	bf00      	nop
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40004400 	.word	0x40004400
 8000414:	40021000 	.word	0x40021000
 8000418:	40010800 	.word	0x40010800

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <NMI_Handler+0x4>

08000422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000426:	e7fe      	b.n	8000426 <HardFault_Handler+0x4>

08000428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <MemManage_Handler+0x4>

0800042e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <BusFault_Handler+0x4>

08000434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <UsageFault_Handler+0x4>

0800043a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr

08000446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr

0800045e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000462:	f000 f8b3 	bl	80005cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}

0800046a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800046e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000472:	f000 fb8b 	bl	8000b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000484:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <_sbrk+0x5c>)
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <_sbrk+0x60>)
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000490:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <_sbrk+0x64>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d102      	bne.n	800049e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <_sbrk+0x64>)
 800049a:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <_sbrk+0x68>)
 800049c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800049e:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <_sbrk+0x64>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4413      	add	r3, r2
 80004a6:	693a      	ldr	r2, [r7, #16]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d207      	bcs.n	80004bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004ac:	f001 fe92 	bl	80021d4 <__errno>
 80004b0:	4603      	mov	r3, r0
 80004b2:	220c      	movs	r2, #12
 80004b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ba:	e009      	b.n	80004d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004bc:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <_sbrk+0x64>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004c2:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <_sbrk+0x64>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	4a05      	ldr	r2, [pc, #20]	; (80004e0 <_sbrk+0x64>)
 80004cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ce:	68fb      	ldr	r3, [r7, #12]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20005000 	.word	0x20005000
 80004dc:	00000400 	.word	0x00000400
 80004e0:	200000d8 	.word	0x200000d8
 80004e4:	20000248 	.word	0x20000248

080004e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004f4:	f7ff fff8 	bl	80004e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f8:	480b      	ldr	r0, [pc, #44]	; (8000528 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004fa:	490c      	ldr	r1, [pc, #48]	; (800052c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004fc:	4a0c      	ldr	r2, [pc, #48]	; (8000530 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000500:	e002      	b.n	8000508 <LoopCopyDataInit>

08000502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000506:	3304      	adds	r3, #4

08000508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800050c:	d3f9      	bcc.n	8000502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050e:	4a09      	ldr	r2, [pc, #36]	; (8000534 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000510:	4c09      	ldr	r4, [pc, #36]	; (8000538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000514:	e001      	b.n	800051a <LoopFillZerobss>

08000516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000518:	3204      	adds	r2, #4

0800051a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800051c:	d3fb      	bcc.n	8000516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800051e:	f002 f829 	bl	8002574 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000522:	f7ff fe1b 	bl	800015c <main>
  bx lr
 8000526:	4770      	bx	lr
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800052c:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8000530:	08003864 	.word	0x08003864
  ldr r2, =_sbss
 8000534:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8000538:	20000248 	.word	0x20000248

0800053c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC1_2_IRQHandler>
	...

08000540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <HAL_Init+0x28>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <HAL_Init+0x28>)
 800054a:	f043 0310 	orr.w	r3, r3, #16
 800054e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f923 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000556:	2000      	movs	r0, #0
 8000558:	f000 f808 	bl	800056c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800055c:	f7ff feee 	bl	800033c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40022000 	.word	0x40022000

0800056c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_InitTick+0x54>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_InitTick+0x58>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4619      	mov	r1, r3
 800057e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000582:	fbb3 f3f1 	udiv	r3, r3, r1
 8000586:	fbb2 f3f3 	udiv	r3, r2, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f93b 	bl	8000806 <HAL_SYSTICK_Config>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
 8000598:	e00e      	b.n	80005b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b0f      	cmp	r3, #15
 800059e:	d80a      	bhi.n	80005b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a0:	2200      	movs	r2, #0
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005a8:	f000 f903 	bl	80007b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005ac:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <HAL_InitTick+0x5c>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005b2:	2300      	movs	r3, #0
 80005b4:	e000      	b.n	80005b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000008 	.word	0x20000008
 80005c8:	20000004 	.word	0x20000004

080005cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_IncTick+0x1c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_IncTick+0x20>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a03      	ldr	r2, [pc, #12]	; (80005ec <HAL_IncTick+0x20>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	20000008 	.word	0x20000008
 80005ec:	2000021c 	.word	0x2000021c

080005f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return uwTick;
 80005f4:	4b02      	ldr	r3, [pc, #8]	; (8000600 <HAL_GetTick+0x10>)
 80005f6:	681b      	ldr	r3, [r3, #0]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	2000021c 	.word	0x2000021c

08000604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800062c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <__NVIC_GetPriorityGrouping+0x18>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	f003 0307 	and.w	r3, r3, #7
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	2b00      	cmp	r3, #0
 8000678:	db0b      	blt.n	8000692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f003 021f 	and.w	r2, r3, #31
 8000680:	4906      	ldr	r1, [pc, #24]	; (800069c <__NVIC_EnableIRQ+0x34>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	095b      	lsrs	r3, r3, #5
 8000688:	2001      	movs	r0, #1
 800068a:	fa00 f202 	lsl.w	r2, r0, r2
 800068e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	; 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800077c:	f7ff ff90 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff2d 	bl	8000604 <__NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff42 	bl	800064c <__NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff90 	bl	80006f4 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5f 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff35 	bl	8000668 <__NVIC_EnableIRQ>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffa2 	bl	8000758 <SysTick_Config>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000820:	b480      	push	{r7}
 8000822:	b08b      	sub	sp, #44	; 0x2c
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000832:	e169      	b.n	8000b08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000834:	2201      	movs	r2, #1
 8000836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	69fa      	ldr	r2, [r7, #28]
 8000844:	4013      	ands	r3, r2
 8000846:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	429a      	cmp	r2, r3
 800084e:	f040 8158 	bne.w	8000b02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	4a9a      	ldr	r2, [pc, #616]	; (8000ac0 <HAL_GPIO_Init+0x2a0>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d05e      	beq.n	800091a <HAL_GPIO_Init+0xfa>
 800085c:	4a98      	ldr	r2, [pc, #608]	; (8000ac0 <HAL_GPIO_Init+0x2a0>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d875      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 8000862:	4a98      	ldr	r2, [pc, #608]	; (8000ac4 <HAL_GPIO_Init+0x2a4>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d058      	beq.n	800091a <HAL_GPIO_Init+0xfa>
 8000868:	4a96      	ldr	r2, [pc, #600]	; (8000ac4 <HAL_GPIO_Init+0x2a4>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d86f      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 800086e:	4a96      	ldr	r2, [pc, #600]	; (8000ac8 <HAL_GPIO_Init+0x2a8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d052      	beq.n	800091a <HAL_GPIO_Init+0xfa>
 8000874:	4a94      	ldr	r2, [pc, #592]	; (8000ac8 <HAL_GPIO_Init+0x2a8>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d869      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 800087a:	4a94      	ldr	r2, [pc, #592]	; (8000acc <HAL_GPIO_Init+0x2ac>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d04c      	beq.n	800091a <HAL_GPIO_Init+0xfa>
 8000880:	4a92      	ldr	r2, [pc, #584]	; (8000acc <HAL_GPIO_Init+0x2ac>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d863      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 8000886:	4a92      	ldr	r2, [pc, #584]	; (8000ad0 <HAL_GPIO_Init+0x2b0>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d046      	beq.n	800091a <HAL_GPIO_Init+0xfa>
 800088c:	4a90      	ldr	r2, [pc, #576]	; (8000ad0 <HAL_GPIO_Init+0x2b0>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d85d      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 8000892:	2b12      	cmp	r3, #18
 8000894:	d82a      	bhi.n	80008ec <HAL_GPIO_Init+0xcc>
 8000896:	2b12      	cmp	r3, #18
 8000898:	d859      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 800089a:	a201      	add	r2, pc, #4	; (adr r2, 80008a0 <HAL_GPIO_Init+0x80>)
 800089c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a0:	0800091b 	.word	0x0800091b
 80008a4:	080008f5 	.word	0x080008f5
 80008a8:	08000907 	.word	0x08000907
 80008ac:	08000949 	.word	0x08000949
 80008b0:	0800094f 	.word	0x0800094f
 80008b4:	0800094f 	.word	0x0800094f
 80008b8:	0800094f 	.word	0x0800094f
 80008bc:	0800094f 	.word	0x0800094f
 80008c0:	0800094f 	.word	0x0800094f
 80008c4:	0800094f 	.word	0x0800094f
 80008c8:	0800094f 	.word	0x0800094f
 80008cc:	0800094f 	.word	0x0800094f
 80008d0:	0800094f 	.word	0x0800094f
 80008d4:	0800094f 	.word	0x0800094f
 80008d8:	0800094f 	.word	0x0800094f
 80008dc:	0800094f 	.word	0x0800094f
 80008e0:	0800094f 	.word	0x0800094f
 80008e4:	080008fd 	.word	0x080008fd
 80008e8:	08000911 	.word	0x08000911
 80008ec:	4a79      	ldr	r2, [pc, #484]	; (8000ad4 <HAL_GPIO_Init+0x2b4>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d013      	beq.n	800091a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008f2:	e02c      	b.n	800094e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	623b      	str	r3, [r7, #32]
          break;
 80008fa:	e029      	b.n	8000950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	3304      	adds	r3, #4
 8000902:	623b      	str	r3, [r7, #32]
          break;
 8000904:	e024      	b.n	8000950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	3308      	adds	r3, #8
 800090c:	623b      	str	r3, [r7, #32]
          break;
 800090e:	e01f      	b.n	8000950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	330c      	adds	r3, #12
 8000916:	623b      	str	r3, [r7, #32]
          break;
 8000918:	e01a      	b.n	8000950 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d102      	bne.n	8000928 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000922:	2304      	movs	r3, #4
 8000924:	623b      	str	r3, [r7, #32]
          break;
 8000926:	e013      	b.n	8000950 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d105      	bne.n	800093c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000930:	2308      	movs	r3, #8
 8000932:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	69fa      	ldr	r2, [r7, #28]
 8000938:	611a      	str	r2, [r3, #16]
          break;
 800093a:	e009      	b.n	8000950 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800093c:	2308      	movs	r3, #8
 800093e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	69fa      	ldr	r2, [r7, #28]
 8000944:	615a      	str	r2, [r3, #20]
          break;
 8000946:	e003      	b.n	8000950 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
          break;
 800094c:	e000      	b.n	8000950 <HAL_GPIO_Init+0x130>
          break;
 800094e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	2bff      	cmp	r3, #255	; 0xff
 8000954:	d801      	bhi.n	800095a <HAL_GPIO_Init+0x13a>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	e001      	b.n	800095e <HAL_GPIO_Init+0x13e>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3304      	adds	r3, #4
 800095e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	2bff      	cmp	r3, #255	; 0xff
 8000964:	d802      	bhi.n	800096c <HAL_GPIO_Init+0x14c>
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	e002      	b.n	8000972 <HAL_GPIO_Init+0x152>
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	3b08      	subs	r3, #8
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	210f      	movs	r1, #15
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	401a      	ands	r2, r3
 8000984:	6a39      	ldr	r1, [r7, #32]
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	431a      	orrs	r2, r3
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	2b00      	cmp	r3, #0
 800099c:	f000 80b1 	beq.w	8000b02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009a0:	4b4d      	ldr	r3, [pc, #308]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a4c      	ldr	r2, [pc, #304]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b4a      	ldr	r3, [pc, #296]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009b8:	4a48      	ldr	r2, [pc, #288]	; (8000adc <HAL_GPIO_Init+0x2bc>)
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	089b      	lsrs	r3, r3, #2
 80009be:	3302      	adds	r3, #2
 80009c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	f003 0303 	and.w	r3, r3, #3
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	220f      	movs	r2, #15
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	4013      	ands	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a40      	ldr	r2, [pc, #256]	; (8000ae0 <HAL_GPIO_Init+0x2c0>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d013      	beq.n	8000a0c <HAL_GPIO_Init+0x1ec>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a3f      	ldr	r2, [pc, #252]	; (8000ae4 <HAL_GPIO_Init+0x2c4>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d00d      	beq.n	8000a08 <HAL_GPIO_Init+0x1e8>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a3e      	ldr	r2, [pc, #248]	; (8000ae8 <HAL_GPIO_Init+0x2c8>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d007      	beq.n	8000a04 <HAL_GPIO_Init+0x1e4>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a3d      	ldr	r2, [pc, #244]	; (8000aec <HAL_GPIO_Init+0x2cc>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d101      	bne.n	8000a00 <HAL_GPIO_Init+0x1e0>
 80009fc:	2303      	movs	r3, #3
 80009fe:	e006      	b.n	8000a0e <HAL_GPIO_Init+0x1ee>
 8000a00:	2304      	movs	r3, #4
 8000a02:	e004      	b.n	8000a0e <HAL_GPIO_Init+0x1ee>
 8000a04:	2302      	movs	r3, #2
 8000a06:	e002      	b.n	8000a0e <HAL_GPIO_Init+0x1ee>
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e000      	b.n	8000a0e <HAL_GPIO_Init+0x1ee>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a10:	f002 0203 	and.w	r2, r2, #3
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	4093      	lsls	r3, r2
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a1e:	492f      	ldr	r1, [pc, #188]	; (8000adc <HAL_GPIO_Init+0x2bc>)
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	3302      	adds	r3, #2
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d006      	beq.n	8000a46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a38:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	492c      	ldr	r1, [pc, #176]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	608b      	str	r3, [r1, #8]
 8000a44:	e006      	b.n	8000a54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a46:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	4928      	ldr	r1, [pc, #160]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a50:	4013      	ands	r3, r2
 8000a52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a60:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	4922      	ldr	r1, [pc, #136]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	60cb      	str	r3, [r1, #12]
 8000a6c:	e006      	b.n	8000a7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a6e:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a70:	68da      	ldr	r2, [r3, #12]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	491e      	ldr	r1, [pc, #120]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d006      	beq.n	8000a96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a8a:	685a      	ldr	r2, [r3, #4]
 8000a8c:	4918      	ldr	r1, [pc, #96]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	604b      	str	r3, [r1, #4]
 8000a94:	e006      	b.n	8000aa4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a98:	685a      	ldr	r2, [r3, #4]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	4914      	ldr	r1, [pc, #80]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d021      	beq.n	8000af4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	490e      	ldr	r1, [pc, #56]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	600b      	str	r3, [r1, #0]
 8000abc:	e021      	b.n	8000b02 <HAL_GPIO_Init+0x2e2>
 8000abe:	bf00      	nop
 8000ac0:	10320000 	.word	0x10320000
 8000ac4:	10310000 	.word	0x10310000
 8000ac8:	10220000 	.word	0x10220000
 8000acc:	10210000 	.word	0x10210000
 8000ad0:	10120000 	.word	0x10120000
 8000ad4:	10110000 	.word	0x10110000
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010000 	.word	0x40010000
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	40010c00 	.word	0x40010c00
 8000ae8:	40011000 	.word	0x40011000
 8000aec:	40011400 	.word	0x40011400
 8000af0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_GPIO_Init+0x304>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	4909      	ldr	r1, [pc, #36]	; (8000b24 <HAL_GPIO_Init+0x304>)
 8000afe:	4013      	ands	r3, r2
 8000b00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	3301      	adds	r3, #1
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f47f ae8e 	bne.w	8000834 <HAL_GPIO_Init+0x14>
  }
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	372c      	adds	r7, #44	; 0x2c
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	40010400 	.word	0x40010400

08000b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]
 8000b34:	4613      	mov	r3, r2
 8000b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b38:	787b      	ldrb	r3, [r7, #1]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b3e:	887a      	ldrh	r2, [r7, #2]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b44:	e003      	b.n	8000b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b46:	887b      	ldrh	r3, [r7, #2]
 8000b48:	041a      	lsls	r2, r3, #16
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	611a      	str	r2, [r3, #16]
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b6a:	887a      	ldrh	r2, [r7, #2]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	041a      	lsls	r2, r3, #16
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43d9      	mvns	r1, r3
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	400b      	ands	r3, r1
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	611a      	str	r2, [r3, #16]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
	...

08000b8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d006      	beq.n	8000bb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f806 	bl	8000bbc <HAL_GPIO_EXTI_Callback>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40010400 	.word	0x40010400

08000bbc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e26c      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 8087 	beq.w	8000cfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bf0:	4b92      	ldr	r3, [pc, #584]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 030c 	and.w	r3, r3, #12
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	d00c      	beq.n	8000c16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bfc:	4b8f      	ldr	r3, [pc, #572]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 030c 	and.w	r3, r3, #12
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	d112      	bne.n	8000c2e <HAL_RCC_OscConfig+0x5e>
 8000c08:	4b8c      	ldr	r3, [pc, #560]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c14:	d10b      	bne.n	8000c2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c16:	4b89      	ldr	r3, [pc, #548]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d06c      	beq.n	8000cfc <HAL_RCC_OscConfig+0x12c>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d168      	bne.n	8000cfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e246      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c36:	d106      	bne.n	8000c46 <HAL_RCC_OscConfig+0x76>
 8000c38:	4b80      	ldr	r3, [pc, #512]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a7f      	ldr	r2, [pc, #508]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	e02e      	b.n	8000ca4 <HAL_RCC_OscConfig+0xd4>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10c      	bne.n	8000c68 <HAL_RCC_OscConfig+0x98>
 8000c4e:	4b7b      	ldr	r3, [pc, #492]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a7a      	ldr	r2, [pc, #488]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4b78      	ldr	r3, [pc, #480]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a77      	ldr	r2, [pc, #476]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e01d      	b.n	8000ca4 <HAL_RCC_OscConfig+0xd4>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c70:	d10c      	bne.n	8000c8c <HAL_RCC_OscConfig+0xbc>
 8000c72:	4b72      	ldr	r3, [pc, #456]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a71      	ldr	r2, [pc, #452]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	4b6f      	ldr	r3, [pc, #444]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a6e      	ldr	r2, [pc, #440]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	e00b      	b.n	8000ca4 <HAL_RCC_OscConfig+0xd4>
 8000c8c:	4b6b      	ldr	r3, [pc, #428]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a6a      	ldr	r2, [pc, #424]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	4b68      	ldr	r3, [pc, #416]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a67      	ldr	r2, [pc, #412]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d013      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cac:	f7ff fca0 	bl	80005f0 <HAL_GetTick>
 8000cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb2:	e008      	b.n	8000cc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cb4:	f7ff fc9c 	bl	80005f0 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	2b64      	cmp	r3, #100	; 0x64
 8000cc0:	d901      	bls.n	8000cc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e1fa      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc6:	4b5d      	ldr	r3, [pc, #372]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d0f0      	beq.n	8000cb4 <HAL_RCC_OscConfig+0xe4>
 8000cd2:	e014      	b.n	8000cfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd4:	f7ff fc8c 	bl	80005f0 <HAL_GetTick>
 8000cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cda:	e008      	b.n	8000cee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cdc:	f7ff fc88 	bl	80005f0 <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	2b64      	cmp	r3, #100	; 0x64
 8000ce8:	d901      	bls.n	8000cee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cea:	2303      	movs	r3, #3
 8000cec:	e1e6      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cee:	4b53      	ldr	r3, [pc, #332]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1f0      	bne.n	8000cdc <HAL_RCC_OscConfig+0x10c>
 8000cfa:	e000      	b.n	8000cfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d063      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 030c 	and.w	r3, r3, #12
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00b      	beq.n	8000d2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d16:	4b49      	ldr	r3, [pc, #292]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	d11c      	bne.n	8000d5c <HAL_RCC_OscConfig+0x18c>
 8000d22:	4b46      	ldr	r3, [pc, #280]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d116      	bne.n	8000d5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d2e:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d005      	beq.n	8000d46 <HAL_RCC_OscConfig+0x176>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d001      	beq.n	8000d46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e1ba      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d46:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	4939      	ldr	r1, [pc, #228]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d5a:	e03a      	b.n	8000dd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d020      	beq.n	8000da6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d64:	4b36      	ldr	r3, [pc, #216]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6a:	f7ff fc41 	bl	80005f0 <HAL_GetTick>
 8000d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d70:	e008      	b.n	8000d84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d72:	f7ff fc3d 	bl	80005f0 <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d901      	bls.n	8000d84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d80:	2303      	movs	r3, #3
 8000d82:	e19b      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d84:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0f0      	beq.n	8000d72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d90:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	4927      	ldr	r1, [pc, #156]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000da0:	4313      	orrs	r3, r2
 8000da2:	600b      	str	r3, [r1, #0]
 8000da4:	e015      	b.n	8000dd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000da6:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <HAL_RCC_OscConfig+0x270>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dac:	f7ff fc20 	bl	80005f0 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000db4:	f7ff fc1c 	bl	80005f0 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e17a      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f0      	bne.n	8000db4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d03a      	beq.n	8000e54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d019      	beq.n	8000e1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_RCC_OscConfig+0x274>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dec:	f7ff fc00 	bl	80005f0 <HAL_GetTick>
 8000df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df4:	f7ff fbfc 	bl	80005f0 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e15a      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_RCC_OscConfig+0x26c>)
 8000e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f0      	beq.n	8000df4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e12:	2001      	movs	r0, #1
 8000e14:	f000 facc 	bl	80013b0 <RCC_Delay>
 8000e18:	e01c      	b.n	8000e54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_RCC_OscConfig+0x274>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e20:	f7ff fbe6 	bl	80005f0 <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e26:	e00f      	b.n	8000e48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e28:	f7ff fbe2 	bl	80005f0 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d908      	bls.n	8000e48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e140      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	42420000 	.word	0x42420000
 8000e44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e48:	4b9e      	ldr	r3, [pc, #632]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1e9      	bne.n	8000e28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f000 80a6 	beq.w	8000fae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e66:	4b97      	ldr	r3, [pc, #604]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10d      	bne.n	8000e8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	4b94      	ldr	r3, [pc, #592]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	4a93      	ldr	r2, [pc, #588]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	61d3      	str	r3, [r2, #28]
 8000e7e:	4b91      	ldr	r3, [pc, #580]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e8e:	4b8e      	ldr	r3, [pc, #568]	; (80010c8 <HAL_RCC_OscConfig+0x4f8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d118      	bne.n	8000ecc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e9a:	4b8b      	ldr	r3, [pc, #556]	; (80010c8 <HAL_RCC_OscConfig+0x4f8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a8a      	ldr	r2, [pc, #552]	; (80010c8 <HAL_RCC_OscConfig+0x4f8>)
 8000ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ea6:	f7ff fba3 	bl	80005f0 <HAL_GetTick>
 8000eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eac:	e008      	b.n	8000ec0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eae:	f7ff fb9f 	bl	80005f0 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b64      	cmp	r3, #100	; 0x64
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e0fd      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec0:	4b81      	ldr	r3, [pc, #516]	; (80010c8 <HAL_RCC_OscConfig+0x4f8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0f0      	beq.n	8000eae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d106      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x312>
 8000ed4:	4b7b      	ldr	r3, [pc, #492]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4a7a      	ldr	r2, [pc, #488]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6213      	str	r3, [r2, #32]
 8000ee0:	e02d      	b.n	8000f3e <HAL_RCC_OscConfig+0x36e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10c      	bne.n	8000f04 <HAL_RCC_OscConfig+0x334>
 8000eea:	4b76      	ldr	r3, [pc, #472]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	4a75      	ldr	r2, [pc, #468]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000ef0:	f023 0301 	bic.w	r3, r3, #1
 8000ef4:	6213      	str	r3, [r2, #32]
 8000ef6:	4b73      	ldr	r3, [pc, #460]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	4a72      	ldr	r2, [pc, #456]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000efc:	f023 0304 	bic.w	r3, r3, #4
 8000f00:	6213      	str	r3, [r2, #32]
 8000f02:	e01c      	b.n	8000f3e <HAL_RCC_OscConfig+0x36e>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	2b05      	cmp	r3, #5
 8000f0a:	d10c      	bne.n	8000f26 <HAL_RCC_OscConfig+0x356>
 8000f0c:	4b6d      	ldr	r3, [pc, #436]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	4a6c      	ldr	r2, [pc, #432]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	6213      	str	r3, [r2, #32]
 8000f18:	4b6a      	ldr	r3, [pc, #424]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	4a69      	ldr	r2, [pc, #420]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6213      	str	r3, [r2, #32]
 8000f24:	e00b      	b.n	8000f3e <HAL_RCC_OscConfig+0x36e>
 8000f26:	4b67      	ldr	r3, [pc, #412]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000f28:	6a1b      	ldr	r3, [r3, #32]
 8000f2a:	4a66      	ldr	r2, [pc, #408]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000f2c:	f023 0301 	bic.w	r3, r3, #1
 8000f30:	6213      	str	r3, [r2, #32]
 8000f32:	4b64      	ldr	r3, [pc, #400]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000f34:	6a1b      	ldr	r3, [r3, #32]
 8000f36:	4a63      	ldr	r2, [pc, #396]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000f38:	f023 0304 	bic.w	r3, r3, #4
 8000f3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d015      	beq.n	8000f72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f46:	f7ff fb53 	bl	80005f0 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f4c:	e00a      	b.n	8000f64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f4e:	f7ff fb4f 	bl	80005f0 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e0ab      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f64:	4b57      	ldr	r3, [pc, #348]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0ee      	beq.n	8000f4e <HAL_RCC_OscConfig+0x37e>
 8000f70:	e014      	b.n	8000f9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f72:	f7ff fb3d 	bl	80005f0 <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f78:	e00a      	b.n	8000f90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f7a:	f7ff fb39 	bl	80005f0 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e095      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f90:	4b4c      	ldr	r3, [pc, #304]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1ee      	bne.n	8000f7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d105      	bne.n	8000fae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fa2:	4b48      	ldr	r3, [pc, #288]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a47      	ldr	r2, [pc, #284]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8081 	beq.w	80010ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fb8:	4b42      	ldr	r3, [pc, #264]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	d061      	beq.n	8001088 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69db      	ldr	r3, [r3, #28]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d146      	bne.n	800105a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fcc:	4b3f      	ldr	r3, [pc, #252]	; (80010cc <HAL_RCC_OscConfig+0x4fc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fb0d 	bl	80005f0 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fda:	f7ff fb09 	bl	80005f0 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e067      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fec:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f0      	bne.n	8000fda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001000:	d108      	bne.n	8001014 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001002:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	492d      	ldr	r1, [pc, #180]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8001010:	4313      	orrs	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001014:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a19      	ldr	r1, [r3, #32]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	430b      	orrs	r3, r1
 8001026:	4927      	ldr	r1, [pc, #156]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8001028:	4313      	orrs	r3, r2
 800102a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <HAL_RCC_OscConfig+0x4fc>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001032:	f7ff fadd 	bl	80005f0 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800103a:	f7ff fad9 	bl	80005f0 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e037      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x46a>
 8001058:	e02f      	b.n	80010ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <HAL_RCC_OscConfig+0x4fc>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001060:	f7ff fac6 	bl	80005f0 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001068:	f7ff fac2 	bl	80005f0 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e020      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f0      	bne.n	8001068 <HAL_RCC_OscConfig+0x498>
 8001086:	e018      	b.n	80010ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e013      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_RCC_OscConfig+0x4f4>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d106      	bne.n	80010b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d001      	beq.n	80010ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40007000 	.word	0x40007000
 80010cc:	42420060 	.word	0x42420060

080010d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e0d0      	b.n	8001286 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010e4:	4b6a      	ldr	r3, [pc, #424]	; (8001290 <HAL_RCC_ClockConfig+0x1c0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d910      	bls.n	8001114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f2:	4b67      	ldr	r3, [pc, #412]	; (8001290 <HAL_RCC_ClockConfig+0x1c0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 0207 	bic.w	r2, r3, #7
 80010fa:	4965      	ldr	r1, [pc, #404]	; (8001290 <HAL_RCC_ClockConfig+0x1c0>)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	4313      	orrs	r3, r2
 8001100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001102:	4b63      	ldr	r3, [pc, #396]	; (8001290 <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d001      	beq.n	8001114 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0b8      	b.n	8001286 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d020      	beq.n	8001162 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800112c:	4b59      	ldr	r3, [pc, #356]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4a58      	ldr	r2, [pc, #352]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001136:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001144:	4b53      	ldr	r3, [pc, #332]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	4a52      	ldr	r2, [pc, #328]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 800114a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800114e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001150:	4b50      	ldr	r3, [pc, #320]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	494d      	ldr	r1, [pc, #308]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 800115e:	4313      	orrs	r3, r2
 8001160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d040      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d107      	bne.n	8001186 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d115      	bne.n	80011ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e07f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d107      	bne.n	800119e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800118e:	4b41      	ldr	r3, [pc, #260]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d109      	bne.n	80011ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e073      	b.n	8001286 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119e:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e06b      	b.n	8001286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ae:	4b39      	ldr	r3, [pc, #228]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f023 0203 	bic.w	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	4936      	ldr	r1, [pc, #216]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011c0:	f7ff fa16 	bl	80005f0 <HAL_GetTick>
 80011c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c6:	e00a      	b.n	80011de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c8:	f7ff fa12 	bl	80005f0 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e053      	b.n	8001286 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 020c 	and.w	r2, r3, #12
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d1eb      	bne.n	80011c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011f0:	4b27      	ldr	r3, [pc, #156]	; (8001290 <HAL_RCC_ClockConfig+0x1c0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d210      	bcs.n	8001220 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fe:	4b24      	ldr	r3, [pc, #144]	; (8001290 <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 0207 	bic.w	r2, r3, #7
 8001206:	4922      	ldr	r1, [pc, #136]	; (8001290 <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d001      	beq.n	8001220 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e032      	b.n	8001286 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4916      	ldr	r1, [pc, #88]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	4313      	orrs	r3, r2
 800123c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	490e      	ldr	r1, [pc, #56]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	4313      	orrs	r3, r2
 800125c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800125e:	f000 f821 	bl	80012a4 <HAL_RCC_GetSysClockFreq>
 8001262:	4602      	mov	r2, r0
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	091b      	lsrs	r3, r3, #4
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	490a      	ldr	r1, [pc, #40]	; (8001298 <HAL_RCC_ClockConfig+0x1c8>)
 8001270:	5ccb      	ldrb	r3, [r1, r3]
 8001272:	fa22 f303 	lsr.w	r3, r2, r3
 8001276:	4a09      	ldr	r2, [pc, #36]	; (800129c <HAL_RCC_ClockConfig+0x1cc>)
 8001278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_RCC_ClockConfig+0x1d0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f974 	bl	800056c <HAL_InitTick>

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40022000 	.word	0x40022000
 8001294:	40021000 	.word	0x40021000
 8001298:	08003778 	.word	0x08003778
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012be:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <HAL_RCC_GetSysClockFreq+0x94>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d002      	beq.n	80012d4 <HAL_RCC_GetSysClockFreq+0x30>
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d003      	beq.n	80012da <HAL_RCC_GetSysClockFreq+0x36>
 80012d2:	e027      	b.n	8001324 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_RCC_GetSysClockFreq+0x98>)
 80012d6:	613b      	str	r3, [r7, #16]
      break;
 80012d8:	e027      	b.n	800132a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	0c9b      	lsrs	r3, r3, #18
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d010      	beq.n	8001314 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_RCC_GetSysClockFreq+0x94>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	0c5b      	lsrs	r3, r3, #17
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	4a11      	ldr	r2, [pc, #68]	; (8001344 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012fe:	5cd3      	ldrb	r3, [r2, r3]
 8001300:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <HAL_RCC_GetSysClockFreq+0x98>)
 8001306:	fb02 f203 	mul.w	r2, r2, r3
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e004      	b.n	800131e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a0c      	ldr	r2, [pc, #48]	; (8001348 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001318:	fb02 f303 	mul.w	r3, r2, r3
 800131c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	613b      	str	r3, [r7, #16]
      break;
 8001322:	e002      	b.n	800132a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_RCC_GetSysClockFreq+0x98>)
 8001326:	613b      	str	r3, [r7, #16]
      break;
 8001328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800132a:	693b      	ldr	r3, [r7, #16]
}
 800132c:	4618      	mov	r0, r3
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000
 800133c:	007a1200 	.word	0x007a1200
 8001340:	08003790 	.word	0x08003790
 8001344:	080037a0 	.word	0x080037a0
 8001348:	003d0900 	.word	0x003d0900

0800134c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001350:	4b02      	ldr	r3, [pc, #8]	; (800135c <HAL_RCC_GetHCLKFreq+0x10>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	20000000 	.word	0x20000000

08001360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001364:	f7ff fff2 	bl	800134c <HAL_RCC_GetHCLKFreq>
 8001368:	4602      	mov	r2, r0
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	0a1b      	lsrs	r3, r3, #8
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	4903      	ldr	r1, [pc, #12]	; (8001384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001376:	5ccb      	ldrb	r3, [r1, r3]
 8001378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800137c:	4618      	mov	r0, r3
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000
 8001384:	08003788 	.word	0x08003788

08001388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800138c:	f7ff ffde 	bl	800134c <HAL_RCC_GetHCLKFreq>
 8001390:	4602      	mov	r2, r0
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	0adb      	lsrs	r3, r3, #11
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	4903      	ldr	r1, [pc, #12]	; (80013ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800139e:	5ccb      	ldrb	r3, [r1, r3]
 80013a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	08003788 	.word	0x08003788

080013b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <RCC_Delay+0x34>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <RCC_Delay+0x38>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0a5b      	lsrs	r3, r3, #9
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013cc:	bf00      	nop
  }
  while (Delay --);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	1e5a      	subs	r2, r3, #1
 80013d2:	60fa      	str	r2, [r7, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f9      	bne.n	80013cc <RCC_Delay+0x1c>
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	20000000 	.word	0x20000000
 80013e8:	10624dd3 	.word	0x10624dd3

080013ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e042      	b.n	8001484 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7fe ffc4 	bl	80003a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2224      	movs	r2, #36	; 0x24
 800141c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800142e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f82b 	bl	800148c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	695a      	ldr	r2, [r3, #20]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2220      	movs	r2, #32
 8001470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2220      	movs	r2, #32
 8001478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80014c6:	f023 030c 	bic.w	r3, r3, #12
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	68b9      	ldr	r1, [r7, #8]
 80014d0:	430b      	orrs	r3, r1
 80014d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699a      	ldr	r2, [r3, #24]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a2c      	ldr	r2, [pc, #176]	; (80015a0 <UART_SetConfig+0x114>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d103      	bne.n	80014fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80014f4:	f7ff ff48 	bl	8001388 <HAL_RCC_GetPCLK2Freq>
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	e002      	b.n	8001502 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80014fc:	f7ff ff30 	bl	8001360 <HAL_RCC_GetPCLK1Freq>
 8001500:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	009a      	lsls	r2, r3, #2
 800150c:	441a      	add	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	fbb2 f3f3 	udiv	r3, r2, r3
 8001518:	4a22      	ldr	r2, [pc, #136]	; (80015a4 <UART_SetConfig+0x118>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	0119      	lsls	r1, r3, #4
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	009a      	lsls	r2, r3, #2
 800152c:	441a      	add	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	fbb2 f2f3 	udiv	r2, r2, r3
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <UART_SetConfig+0x118>)
 800153a:	fba3 0302 	umull	r0, r3, r3, r2
 800153e:	095b      	lsrs	r3, r3, #5
 8001540:	2064      	movs	r0, #100	; 0x64
 8001542:	fb00 f303 	mul.w	r3, r0, r3
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	3332      	adds	r3, #50	; 0x32
 800154c:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <UART_SetConfig+0x118>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001558:	4419      	add	r1, r3
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	009a      	lsls	r2, r3, #2
 8001564:	441a      	add	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <UART_SetConfig+0x118>)
 8001572:	fba3 0302 	umull	r0, r3, r3, r2
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2064      	movs	r0, #100	; 0x64
 800157a:	fb00 f303 	mul.w	r3, r0, r3
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	3332      	adds	r3, #50	; 0x32
 8001584:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <UART_SetConfig+0x118>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	f003 020f 	and.w	r2, r3, #15
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	440a      	add	r2, r1
 8001596:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40013800 	.word	0x40013800
 80015a4:	51eb851f 	.word	0x51eb851f

080015a8 <app_init>:
 * The function definition consists of actual statements which are executed
 * when the function is called (i.e. when the program control comes to the
 * function).
 */
void app_init(void)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 80015ae:	b672      	cpsid	i
 80015b0:	4b43      	ldr	r3, [pc, #268]	; (80016c0 <app_init+0x118>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a43      	ldr	r2, [pc, #268]	; (80016c4 <app_init+0x11c>)
 80015b6:	213f      	movs	r1, #63	; 0x3f
 80015b8:	4618      	mov	r0, r3
 80015ba:	f001 f8d9 	bl	8002770 <sniprintf>
 80015be:	4603      	mov	r3, r0
 80015c0:	4a41      	ldr	r2, [pc, #260]	; (80016c8 <app_init+0x120>)
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b3e      	ldr	r3, [pc, #248]	; (80016c0 <app_init+0x118>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f965 	bl	8001898 <logger_log_print_>
 80015ce:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)HAL_GetTick());
 80015d0:	b672      	cpsid	i
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <app_init+0x118>)
 80015d4:	681c      	ldr	r4, [r3, #0]
 80015d6:	f7ff f80b 	bl	80005f0 <HAL_GetTick>
 80015da:	4603      	mov	r3, r0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <app_init+0x124>)
 80015e0:	4a3b      	ldr	r2, [pc, #236]	; (80016d0 <app_init+0x128>)
 80015e2:	213f      	movs	r1, #63	; 0x3f
 80015e4:	4620      	mov	r0, r4
 80015e6:	f001 f8c3 	bl	8002770 <sniprintf>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a36      	ldr	r2, [pc, #216]	; (80016c8 <app_init+0x120>)
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <app_init+0x118>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f94f 	bl	8001898 <logger_log_print_>
 80015fa:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 80015fc:	b672      	cpsid	i
 80015fe:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <app_init+0x118>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a34      	ldr	r2, [pc, #208]	; (80016d4 <app_init+0x12c>)
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	213f      	movs	r1, #63	; 0x3f
 8001608:	4618      	mov	r0, r3
 800160a:	f001 f8b1 	bl	8002770 <sniprintf>
 800160e:	4603      	mov	r3, r0
 8001610:	4a2d      	ldr	r2, [pc, #180]	; (80016c8 <app_init+0x120>)
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <app_init+0x118>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f93d 	bl	8001898 <logger_log_print_>
 800161e:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8001620:	b672      	cpsid	i
 8001622:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <app_init+0x118>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a2c      	ldr	r2, [pc, #176]	; (80016d8 <app_init+0x130>)
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	213f      	movs	r1, #63	; 0x3f
 800162c:	4618      	mov	r0, r3
 800162e:	f001 f89f 	bl	8002770 <sniprintf>
 8001632:	4603      	mov	r3, r0
 8001634:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <app_init+0x120>)
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <app_init+0x118>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f000 f92b 	bl	8001898 <logger_log_print_>
 8001642:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <app_init+0x134>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 800164a:	b672      	cpsid	i
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <app_init+0x118>)
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <app_init+0x134>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <app_init+0x138>)
 8001658:	4a22      	ldr	r2, [pc, #136]	; (80016e4 <app_init+0x13c>)
 800165a:	213f      	movs	r1, #63	; 0x3f
 800165c:	f001 f888 	bl	8002770 <sniprintf>
 8001660:	4603      	mov	r3, r0
 8001662:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <app_init+0x120>)
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <app_init+0x118>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f914 	bl	8001898 <logger_log_print_>
 8001670:	b662      	cpsie	i

	for (index = 0; index < (sizeof(task_x_init_list)/sizeof(task_x_t)); index++)
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	e00d      	b.n	8001694 <app_init+0xec>
		 * A function call is a statement that instructs the compiler to execute
		 * the function.
		 * We use the function name and parameters in the function call.
		 */
		/* Run task_x_init */
		(*task_x_init_list[index].p_task_x)(task_x_init_list[index].parameters);
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <app_init+0x140>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001680:	4919      	ldr	r1, [pc, #100]	; (80016e8 <app_init+0x140>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4618      	mov	r0, r3
 800168c:	4790      	blx	r2
	for (index = 0; index < (sizeof(task_x_init_list)/sizeof(task_x_t)); index++)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3301      	adds	r3, #1
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d9ee      	bls.n	8001678 <app_init+0xd0>
	}

	cycle_counter_init();
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <app_init+0x144>)
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	4a13      	ldr	r2, [pc, #76]	; (80016ec <app_init+0x144>)
 80016a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016a4:	60d3      	str	r3, [r2, #12]
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <app_init+0x148>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <app_init+0x148>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <app_init+0x148>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd90      	pop	{r4, r7, pc}
 80016c0:	080037a4 	.word	0x080037a4
 80016c4:	08003558 	.word	0x08003558
 80016c8:	20000228 	.word	0x20000228
 80016cc:	0800355c 	.word	0x0800355c
 80016d0:	08003568 	.word	0x08003568
 80016d4:	2000003c 	.word	0x2000003c
 80016d8:	20000040 	.word	0x20000040
 80016dc:	20000220 	.word	0x20000220
 80016e0:	0800358c 	.word	0x0800358c
 80016e4:	08003598 	.word	0x08003598
 80016e8:	2000000c 	.word	0x2000000c
 80016ec:	e000edf0 	.word	0xe000edf0
 80016f0:	e0001000 	.word	0xe0001000

080016f4 <app_update>:

void app_update(void)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af04      	add	r7, sp, #16
	uint32_t index;
	uint32_t cycle_counter;
	uint32_t cycle_counter_time_us;

	/* Update App Counter */
	g_app_cnt++;
 80016fa:	4b55      	ldr	r3, [pc, #340]	; (8001850 <app_update+0x15c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a53      	ldr	r2, [pc, #332]	; (8001850 <app_update+0x15c>)
 8001702:	6013      	str	r3, [r2, #0]

    /* Print out: Application Update */
	LOGGER_LOG("\r\n");
 8001704:	b672      	cpsid	i
 8001706:	4b53      	ldr	r3, [pc, #332]	; (8001854 <app_update+0x160>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a53      	ldr	r2, [pc, #332]	; (8001858 <app_update+0x164>)
 800170c:	213f      	movs	r1, #63	; 0x3f
 800170e:	4618      	mov	r0, r3
 8001710:	f001 f82e 	bl	8002770 <sniprintf>
 8001714:	4603      	mov	r3, r0
 8001716:	4a51      	ldr	r2, [pc, #324]	; (800185c <app_update+0x168>)
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b4e      	ldr	r3, [pc, #312]	; (8001854 <app_update+0x160>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f8ba 	bl	8001898 <logger_log_print_>
 8001724:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_update), (int)HAL_GetTick());
 8001726:	b672      	cpsid	i
 8001728:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <app_update+0x160>)
 800172a:	681c      	ldr	r4, [r3, #0]
 800172c:	f7fe ff60 	bl	80005f0 <HAL_GetTick>
 8001730:	4603      	mov	r3, r0
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <app_update+0x16c>)
 8001736:	4a4b      	ldr	r2, [pc, #300]	; (8001864 <app_update+0x170>)
 8001738:	213f      	movs	r1, #63	; 0x3f
 800173a:	4620      	mov	r0, r4
 800173c:	f001 f818 	bl	8002770 <sniprintf>
 8001740:	4603      	mov	r3, r0
 8001742:	4a46      	ldr	r2, [pc, #280]	; (800185c <app_update+0x168>)
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b43      	ldr	r3, [pc, #268]	; (8001854 <app_update+0x160>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f8a4 	bl	8001898 <logger_log_print_>
 8001750:	b662      	cpsie	i

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 8001752:	b672      	cpsid	i
 8001754:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <app_update+0x160>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <app_update+0x15c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	4b42      	ldr	r3, [pc, #264]	; (8001868 <app_update+0x174>)
 8001760:	4a42      	ldr	r2, [pc, #264]	; (800186c <app_update+0x178>)
 8001762:	213f      	movs	r1, #63	; 0x3f
 8001764:	f001 f804 	bl	8002770 <sniprintf>
 8001768:	4603      	mov	r3, r0
 800176a:	4a3c      	ldr	r2, [pc, #240]	; (800185c <app_update+0x168>)
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b39      	ldr	r3, [pc, #228]	; (8001854 <app_update+0x160>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f890 	bl	8001898 <logger_log_print_>
 8001778:	b662      	cpsie	i

	for (index = 0; index < (sizeof(task_x_update_list)/sizeof(task_x_t)); index++)
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	e05f      	b.n	8001840 <app_update+0x14c>
	{
		/* Print out: Cycle Counter Reset */
		LOGGER_LOG("\r\n");
 8001780:	b672      	cpsid	i
 8001782:	4b34      	ldr	r3, [pc, #208]	; (8001854 <app_update+0x160>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a34      	ldr	r2, [pc, #208]	; (8001858 <app_update+0x164>)
 8001788:	213f      	movs	r1, #63	; 0x3f
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fff0 	bl	8002770 <sniprintf>
 8001790:	4603      	mov	r3, r0
 8001792:	4a32      	ldr	r2, [pc, #200]	; (800185c <app_update+0x168>)
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <app_update+0x160>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f87c 	bl	8001898 <logger_log_print_>
 80017a0:	b662      	cpsie	i
		LOGGER_LOG(" %s\r\n", GET_NAME(cycle_counter_reset));
 80017a2:	b672      	cpsid	i
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <app_update+0x160>)
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	4b31      	ldr	r3, [pc, #196]	; (8001870 <app_update+0x17c>)
 80017aa:	4a32      	ldr	r2, [pc, #200]	; (8001874 <app_update+0x180>)
 80017ac:	213f      	movs	r1, #63	; 0x3f
 80017ae:	f000 ffdf 	bl	8002770 <sniprintf>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a29      	ldr	r2, [pc, #164]	; (800185c <app_update+0x168>)
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b26      	ldr	r3, [pc, #152]	; (8001854 <app_update+0x160>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f86b 	bl	8001898 <logger_log_print_>
 80017c2:	b662      	cpsie	i

		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017c4:	2120      	movs	r1, #32
 80017c6:	482c      	ldr	r0, [pc, #176]	; (8001878 <app_update+0x184>)
 80017c8:	f7ff f9c6 	bl	8000b58 <HAL_GPIO_TogglePin>
		cycle_counter_reset();
 80017cc:	4b2b      	ldr	r3, [pc, #172]	; (800187c <app_update+0x188>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	605a      	str	r2, [r3, #4]
		 * A function call is a statement that instructs the compiler to execute
		 * the function.
		 * We use the function name and parameters in the function call.
		 */
		/* Run task_x_update */
		(*task_x_update_list[index].p_task_x)(task_x_update_list[index].parameters);
 80017d2:	4a2b      	ldr	r2, [pc, #172]	; (8001880 <app_update+0x18c>)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80017da:	4929      	ldr	r1, [pc, #164]	; (8001880 <app_update+0x18c>)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	4790      	blx	r2

		cycle_counter = cycle_counter_get();
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <app_update+0x188>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	60bb      	str	r3, [r7, #8]
		cycle_counter_time_us = cycle_counter_time_us();
 80017ee:	4b23      	ldr	r3, [pc, #140]	; (800187c <app_update+0x188>)
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	4b24      	ldr	r3, [pc, #144]	; (8001884 <app_update+0x190>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4924      	ldr	r1, [pc, #144]	; (8001888 <app_update+0x194>)
 80017f8:	fba1 1303 	umull	r1, r3, r1, r3
 80017fc:	0c9b      	lsrs	r3, r3, #18
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	607b      	str	r3, [r7, #4]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001804:	2120      	movs	r1, #32
 8001806:	481c      	ldr	r0, [pc, #112]	; (8001878 <app_update+0x184>)
 8001808:	f7ff f9a6 	bl	8000b58 <HAL_GPIO_TogglePin>

		/* Print out: Cycle Counter */
		LOGGER_LOG(" %s: %lu - %s: %lu uS\r\n", GET_NAME(cycle_counter), cycle_counter, GET_NAME(cycle_counter_time_us), cycle_counter_time_us);
 800180c:	b672      	cpsid	i
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <app_update+0x160>)
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	9302      	str	r3, [sp, #8]
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <app_update+0x198>)
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <app_update+0x19c>)
 8001820:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <app_update+0x1a0>)
 8001822:	213f      	movs	r1, #63	; 0x3f
 8001824:	f000 ffa4 	bl	8002770 <sniprintf>
 8001828:	4603      	mov	r3, r0
 800182a:	4a0c      	ldr	r2, [pc, #48]	; (800185c <app_update+0x168>)
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <app_update+0x160>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f830 	bl	8001898 <logger_log_print_>
 8001838:	b662      	cpsie	i
	for (index = 0; index < (sizeof(task_x_update_list)/sizeof(task_x_t)); index++)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3301      	adds	r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d99c      	bls.n	8001780 <app_update+0x8c>
	}
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	20000220 	.word	0x20000220
 8001854:	080037a4 	.word	0x080037a4
 8001858:	08003558 	.word	0x08003558
 800185c:	20000228 	.word	0x20000228
 8001860:	080035a4 	.word	0x080035a4
 8001864:	08003568 	.word	0x08003568
 8001868:	0800358c 	.word	0x0800358c
 800186c:	08003598 	.word	0x08003598
 8001870:	080035b0 	.word	0x080035b0
 8001874:	080035c4 	.word	0x080035c4
 8001878:	40010800 	.word	0x40010800
 800187c:	e0001000 	.word	0xe0001000
 8001880:	20000024 	.word	0x20000024
 8001884:	20000000 	.word	0x20000000
 8001888:	431bde83 	.word	0x431bde83
 800188c:	080035f4 	.word	0x080035f4
 8001890:	080035cc 	.word	0x080035cc
 8001894:	080035dc 	.word	0x080035dc

08001898 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	printf(msg);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 ff3d 	bl	8002720 <iprintf>
	fflush(stdout);
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <logger_log_print_+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 fd59 	bl	8002364 <fflush>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000058 	.word	0x20000058

080018c0 <task_a_init>:
/********************** external data declaration *****************************/
uint32_t g_task_a_cnt;

/********************** external functions definition ************************/
void task_a_init(void *parameters)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_a_init), p_task_a);
 80018c8:	b672      	cpsid	i
 80018ca:	4b17      	ldr	r3, [pc, #92]	; (8001928 <task_a_init+0x68>)
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <task_a_init+0x6c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4b16      	ldr	r3, [pc, #88]	; (8001930 <task_a_init+0x70>)
 80018d6:	4a17      	ldr	r2, [pc, #92]	; (8001934 <task_a_init+0x74>)
 80018d8:	213f      	movs	r1, #63	; 0x3f
 80018da:	f000 ff49 	bl	8002770 <sniprintf>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a15      	ldr	r2, [pc, #84]	; (8001938 <task_a_init+0x78>)
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <task_a_init+0x68>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ffd5 	bl	8001898 <logger_log_print_>
 80018ee:	b662      	cpsie	i

	g_task_a_cnt = G_TASK_A_CNT_INI;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <task_a_init+0x7c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_a_cnt), (int)g_task_a_cnt);
 80018f6:	b672      	cpsid	i
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <task_a_init+0x68>)
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <task_a_init+0x7c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <task_a_init+0x80>)
 8001904:	4a0f      	ldr	r2, [pc, #60]	; (8001944 <task_a_init+0x84>)
 8001906:	213f      	movs	r1, #63	; 0x3f
 8001908:	f000 ff32 	bl	8002770 <sniprintf>
 800190c:	4603      	mov	r3, r0
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <task_a_init+0x78>)
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <task_a_init+0x68>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ffbe 	bl	8001898 <logger_log_print_>
 800191c:	b662      	cpsie	i
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	080037a4 	.word	0x080037a4
 800192c:	20000044 	.word	0x20000044
 8001930:	08003624 	.word	0x08003624
 8001934:	08003630 	.word	0x08003630
 8001938:	20000228 	.word	0x20000228
 800193c:	2000022c 	.word	0x2000022c
 8001940:	08003648 	.word	0x08003648
 8001944:	08003658 	.word	0x08003658

08001948 <task_a_update>:

void task_a_update(void *parameters)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af02      	add	r7, sp, #8
 800194e:	6078      	str	r0, [r7, #4]
	 * store data in a defined scope where they can be accessed and
	 * manipulated.
	 */
	#if (TEST_X == TEST_0)

	uint32_t task_a_cnt = TASK_A_CNT_INI;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
	/* Here Chatbot Artificial Intelligence generated code */

	#endif

	/* Update Task A Counter */
	g_task_a_cnt++;
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <task_a_update+0x84>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3301      	adds	r3, #1
 800195a:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <task_a_update+0x84>)
 800195c:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is is running - %s\r\n", GET_NAME(task_a_update), p_task_a);
 800195e:	b672      	cpsid	i
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <task_a_update+0x88>)
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <task_a_update+0x8c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <task_a_update+0x90>)
 800196c:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <task_a_update+0x94>)
 800196e:	213f      	movs	r1, #63	; 0x3f
 8001970:	f000 fefe 	bl	8002770 <sniprintf>
 8001974:	4603      	mov	r3, r0
 8001976:	4a1a      	ldr	r2, [pc, #104]	; (80019e0 <task_a_update+0x98>)
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <task_a_update+0x88>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff8a 	bl	8001898 <logger_log_print_>
 8001984:	b662      	cpsie	i

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_a_cnt), (int)g_task_a_cnt);
 8001986:	b672      	cpsid	i
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <task_a_update+0x88>)
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <task_a_update+0x84>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <task_a_update+0x9c>)
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <task_a_update+0xa0>)
 8001996:	213f      	movs	r1, #63	; 0x3f
 8001998:	f000 feea 	bl	8002770 <sniprintf>
 800199c:	4603      	mov	r3, r0
 800199e:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <task_a_update+0x98>)
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <task_a_update+0x88>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff76 	bl	8001898 <logger_log_print_>
 80019ac:	b662      	cpsie	i
	 * The program waits until the called function or the operation
	 * returns.
	 * */
	#if (TEST_X == TEST_0)

	for (task_a_cnt = TASK_A_CNT_INI; task_a_cnt < TASK_A_CNT_MAX; task_a_cnt++);
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	e002      	b.n	80019ba <task_a_update+0x72>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3301      	adds	r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4a0b      	ldr	r2, [pc, #44]	; (80019ec <task_a_update+0xa4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d9f8      	bls.n	80019b4 <task_a_update+0x6c>
	#if (TEST_X == TEST_2)

	/* Here Chatbot Artificial Intelligence generated code */

	#endif
}
 80019c2:	bf00      	nop
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000022c 	.word	0x2000022c
 80019d0:	080037a4 	.word	0x080037a4
 80019d4:	20000044 	.word	0x20000044
 80019d8:	08003668 	.word	0x08003668
 80019dc:	08003678 	.word	0x08003678
 80019e0:	20000228 	.word	0x20000228
 80019e4:	08003648 	.word	0x08003648
 80019e8:	08003658 	.word	0x08003658
 80019ec:	0001869f 	.word	0x0001869f

080019f0 <task_b_init>:
/********************** external data declaration *****************************/
uint32_t g_task_b_cnt;

/********************** external functions definition ************************/
void task_b_init(void *parameters)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af02      	add	r7, sp, #8
 80019f6:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_b_init), p_task_b);
 80019f8:	b672      	cpsid	i
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <task_b_init+0x68>)
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <task_b_init+0x6c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <task_b_init+0x70>)
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <task_b_init+0x74>)
 8001a08:	213f      	movs	r1, #63	; 0x3f
 8001a0a:	f000 feb1 	bl	8002770 <sniprintf>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4a15      	ldr	r2, [pc, #84]	; (8001a68 <task_b_init+0x78>)
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <task_b_init+0x68>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff3d 	bl	8001898 <logger_log_print_>
 8001a1e:	b662      	cpsie	i

	g_task_b_cnt = G_TASK_B_CNT_INI;
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <task_b_init+0x7c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_b_cnt), (int)g_task_b_cnt);
 8001a26:	b672      	cpsid	i
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <task_b_init+0x68>)
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <task_b_init+0x7c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <task_b_init+0x80>)
 8001a34:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <task_b_init+0x84>)
 8001a36:	213f      	movs	r1, #63	; 0x3f
 8001a38:	f000 fe9a 	bl	8002770 <sniprintf>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <task_b_init+0x78>)
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <task_b_init+0x68>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff26 	bl	8001898 <logger_log_print_>
 8001a4c:	b662      	cpsie	i
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	080037a4 	.word	0x080037a4
 8001a5c:	20000048 	.word	0x20000048
 8001a60:	080036b0 	.word	0x080036b0
 8001a64:	080036bc 	.word	0x080036bc
 8001a68:	20000228 	.word	0x20000228
 8001a6c:	20000230 	.word	0x20000230
 8001a70:	080036d4 	.word	0x080036d4
 8001a74:	080036e4 	.word	0x080036e4

08001a78 <task_b_update>:

void task_b_update(void *parameters)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	6078      	str	r0, [r7, #4]
	/* Here Chatbot Artificial Intelligence generated code */

	#endif

	/* Update Task B Counter */
	g_task_b_cnt++;
 8001a80:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <task_b_update+0x84>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	4a1d      	ldr	r2, [pc, #116]	; (8001afc <task_b_update+0x84>)
 8001a88:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_b_update), p_task_b);
 8001a8a:	b672      	cpsid	i
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <task_b_update+0x88>)
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <task_b_update+0x8c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <task_b_update+0x90>)
 8001a98:	4a1c      	ldr	r2, [pc, #112]	; (8001b0c <task_b_update+0x94>)
 8001a9a:	213f      	movs	r1, #63	; 0x3f
 8001a9c:	f000 fe68 	bl	8002770 <sniprintf>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4a1b      	ldr	r2, [pc, #108]	; (8001b10 <task_b_update+0x98>)
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <task_b_update+0x88>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fef4 	bl	8001898 <logger_log_print_>
 8001ab0:	b662      	cpsie	i

	/* Print out: Task Updated and execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_b_cnt), (int)g_task_b_cnt);
 8001ab2:	b672      	cpsid	i
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <task_b_update+0x88>)
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <task_b_update+0x84>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <task_b_update+0x9c>)
 8001ac0:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <task_b_update+0xa0>)
 8001ac2:	213f      	movs	r1, #63	; 0x3f
 8001ac4:	f000 fe54 	bl	8002770 <sniprintf>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <task_b_update+0x98>)
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <task_b_update+0x88>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fee0 	bl	8001898 <logger_log_print_>
 8001ad8:	b662      	cpsie	i
	 * The program calls the function and move to the next operation and does
	 * not wait for it to return.
	 */
	#if (TEST_X == TEST_0)

	if (task_b_cnt < TASK_B_CNT_MAX)
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <task_b_update+0xa4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b31      	cmp	r3, #49	; 0x31
 8001ae0:	d805      	bhi.n	8001aee <task_b_update+0x76>
		task_b_cnt++;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <task_b_update+0xa4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <task_b_update+0xa4>)
 8001aea:	6013      	str	r3, [r2, #0]
	#if (TEST_X == TEST_2)

	/* Here Chatbot Artificial Intelligence generated code */

	#endif
}
 8001aec:	e002      	b.n	8001af4 <task_b_update+0x7c>
		task_b_cnt = TASK_B_CNT_INI;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <task_b_update+0xa4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000230 	.word	0x20000230
 8001b00:	080037a4 	.word	0x080037a4
 8001b04:	20000048 	.word	0x20000048
 8001b08:	080036f4 	.word	0x080036f4
 8001b0c:	080036bc 	.word	0x080036bc
 8001b10:	20000228 	.word	0x20000228
 8001b14:	080036d4 	.word	0x080036d4
 8001b18:	080036e4 	.word	0x080036e4
 8001b1c:	2000011c 	.word	0x2000011c

08001b20 <task_c_init>:
/********************** external data declaration *****************************/
uint32_t g_task_c_cnt;

/********************** external functions definition ************************/
void task_c_init(void *parameters)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_c_init), p_task_c);
 8001b28:	b672      	cpsid	i
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <task_c_init+0x6c>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <task_c_init+0x70>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <task_c_init+0x74>)
 8001b36:	4a18      	ldr	r2, [pc, #96]	; (8001b98 <task_c_init+0x78>)
 8001b38:	213f      	movs	r1, #63	; 0x3f
 8001b3a:	f000 fe19 	bl	8002770 <sniprintf>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a16      	ldr	r2, [pc, #88]	; (8001b9c <task_c_init+0x7c>)
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <task_c_init+0x6c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fea5 	bl	8001898 <logger_log_print_>
 8001b4e:	b662      	cpsie	i

	g_task_c_cnt = G_TASK_C_CNT_INI;
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <task_c_init+0x80>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
	g_tick_cnt = G_TICK_CNT_INI;
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <task_c_init+0x84>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_c_cnt), (int)g_task_c_cnt);
 8001b5c:	b672      	cpsid	i
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <task_c_init+0x6c>)
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <task_c_init+0x80>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <task_c_init+0x88>)
 8001b6a:	4a10      	ldr	r2, [pc, #64]	; (8001bac <task_c_init+0x8c>)
 8001b6c:	213f      	movs	r1, #63	; 0x3f
 8001b6e:	f000 fdff 	bl	8002770 <sniprintf>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <task_c_init+0x7c>)
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <task_c_init+0x6c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fe8b 	bl	8001898 <logger_log_print_>
 8001b82:	b662      	cpsie	i
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	080037a4 	.word	0x080037a4
 8001b90:	2000004c 	.word	0x2000004c
 8001b94:	08003724 	.word	0x08003724
 8001b98:	08003730 	.word	0x08003730
 8001b9c:	20000228 	.word	0x20000228
 8001ba0:	20000234 	.word	0x20000234
 8001ba4:	20000224 	.word	0x20000224
 8001ba8:	08003748 	.word	0x08003748
 8001bac:	08003758 	.word	0x08003758

08001bb0 <task_c_update>:

void task_c_update(void *parameters)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	6078      	str	r0, [r7, #4]
	bool b_time_update_required = false;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]

	/* Update Task C Counter */
	g_task_c_cnt++;
 8001bbc:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <task_c_update+0xb4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	4a28      	ldr	r2, [pc, #160]	; (8001c64 <task_c_update+0xb4>)
 8001bc4:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_c_update), p_task_c);
 8001bc6:	b672      	cpsid	i
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <task_c_update+0xb8>)
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <task_c_update+0xbc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <task_c_update+0xc0>)
 8001bd4:	4a27      	ldr	r2, [pc, #156]	; (8001c74 <task_c_update+0xc4>)
 8001bd6:	213f      	movs	r1, #63	; 0x3f
 8001bd8:	f000 fdca 	bl	8002770 <sniprintf>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4a26      	ldr	r2, [pc, #152]	; (8001c78 <task_c_update+0xc8>)
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <task_c_update+0xb8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fe56 	bl	8001898 <logger_log_print_>
 8001bec:	b662      	cpsie	i

	/* Print out: Task Updated and execution counter */
	LOGGER_LOG("   %s = %d\r\n", GET_NAME(g_task_c_cnt), (int)g_task_c_cnt);
 8001bee:	b672      	cpsid	i
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <task_c_update+0xb8>)
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <task_c_update+0xb4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <task_c_update+0xcc>)
 8001bfc:	4a20      	ldr	r2, [pc, #128]	; (8001c80 <task_c_update+0xd0>)
 8001bfe:	213f      	movs	r1, #63	; 0x3f
 8001c00:	f000 fdb6 	bl	8002770 <sniprintf>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <task_c_update+0xc8>)
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <task_c_update+0xb8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fe42 	bl	8001898 <logger_log_print_>
 8001c14:	b662      	cpsie	i

	/* Protect shared resource (g_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 8001c16:	b672      	cpsid	i
    if (0 < g_tick_cnt)
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <task_c_update+0xd4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <task_c_update+0x7e>
    {
    	g_tick_cnt--;
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <task_c_update+0xd4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <task_c_update+0xd4>)
 8001c28:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8001c2e:	b662      	cpsie	i

    while (b_time_update_required)
 8001c30:	e00f      	b.n	8001c52 <task_c_update+0xa2>
    	 * For example, update Software Timers
    	 *
    	 */

		/* Protect shared resource (tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 8001c32:	b672      	cpsid	i
		if (0 < g_tick_cnt)
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <task_c_update+0xd4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <task_c_update+0x9c>
		{
			g_tick_cnt--;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <task_c_update+0xd4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	4a10      	ldr	r2, [pc, #64]	; (8001c84 <task_c_update+0xd4>)
 8001c44:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	e001      	b.n	8001c50 <task_c_update+0xa0>
		}
		else
		{
			b_time_update_required = false;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8001c50:	b662      	cpsie	i
    while (b_time_update_required)
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ec      	bne.n	8001c32 <task_c_update+0x82>
	}
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000234 	.word	0x20000234
 8001c68:	080037a4 	.word	0x080037a4
 8001c6c:	2000004c 	.word	0x2000004c
 8001c70:	08003768 	.word	0x08003768
 8001c74:	08003730 	.word	0x08003730
 8001c78:	20000228 	.word	0x20000228
 8001c7c:	08003748 	.word	0x08003748
 8001c80:	08003758 	.word	0x08003758
 8001c84:	20000224 	.word	0x20000224

08001c88 <findslot>:
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <findslot+0x2c>)
 8001c8a:	b510      	push	{r4, lr}
 8001c8c:	4604      	mov	r4, r0
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	b118      	cbz	r0, 8001c9a <findslot+0x12>
 8001c92:	6983      	ldr	r3, [r0, #24]
 8001c94:	b90b      	cbnz	r3, 8001c9a <findslot+0x12>
 8001c96:	f000 fbcf 	bl	8002438 <__sinit>
 8001c9a:	2c13      	cmp	r4, #19
 8001c9c:	d807      	bhi.n	8001cae <findslot+0x26>
 8001c9e:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <findslot+0x30>)
 8001ca0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001ca4:	3201      	adds	r2, #1
 8001ca6:	d002      	beq.n	8001cae <findslot+0x26>
 8001ca8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001cac:	bd10      	pop	{r4, pc}
 8001cae:	2000      	movs	r0, #0
 8001cb0:	e7fc      	b.n	8001cac <findslot+0x24>
 8001cb2:	bf00      	nop
 8001cb4:	20000058 	.word	0x20000058
 8001cb8:	2000012c 	.word	0x2000012c

08001cbc <checkerror>:
 8001cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cbe:	1c43      	adds	r3, r0, #1
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	d109      	bne.n	8001cd8 <checkerror+0x1c>
 8001cc4:	f000 fa86 	bl	80021d4 <__errno>
 8001cc8:	2613      	movs	r6, #19
 8001cca:	4605      	mov	r5, r0
 8001ccc:	2700      	movs	r7, #0
 8001cce:	4630      	mov	r0, r6
 8001cd0:	4639      	mov	r1, r7
 8001cd2:	beab      	bkpt	0x00ab
 8001cd4:	4606      	mov	r6, r0
 8001cd6:	602e      	str	r6, [r5, #0]
 8001cd8:	4620      	mov	r0, r4
 8001cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001cdc <error>:
 8001cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cde:	4604      	mov	r4, r0
 8001ce0:	f000 fa78 	bl	80021d4 <__errno>
 8001ce4:	2613      	movs	r6, #19
 8001ce6:	4605      	mov	r5, r0
 8001ce8:	2700      	movs	r7, #0
 8001cea:	4630      	mov	r0, r6
 8001cec:	4639      	mov	r1, r7
 8001cee:	beab      	bkpt	0x00ab
 8001cf0:	4606      	mov	r6, r0
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	602e      	str	r6, [r5, #0]
 8001cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001cf8 <_swiread>:
 8001cf8:	b530      	push	{r4, r5, lr}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	2406      	movs	r4, #6
 8001cfe:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001d02:	9203      	str	r2, [sp, #12]
 8001d04:	ad01      	add	r5, sp, #4
 8001d06:	4620      	mov	r0, r4
 8001d08:	4629      	mov	r1, r5
 8001d0a:	beab      	bkpt	0x00ab
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	4620      	mov	r0, r4
 8001d10:	f7ff ffd4 	bl	8001cbc <checkerror>
 8001d14:	b005      	add	sp, #20
 8001d16:	bd30      	pop	{r4, r5, pc}

08001d18 <_read>:
 8001d18:	b570      	push	{r4, r5, r6, lr}
 8001d1a:	460e      	mov	r6, r1
 8001d1c:	4615      	mov	r5, r2
 8001d1e:	f7ff ffb3 	bl	8001c88 <findslot>
 8001d22:	4604      	mov	r4, r0
 8001d24:	b930      	cbnz	r0, 8001d34 <_read+0x1c>
 8001d26:	f000 fa55 	bl	80021d4 <__errno>
 8001d2a:	2309      	movs	r3, #9
 8001d2c:	6003      	str	r3, [r0, #0]
 8001d2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d32:	bd70      	pop	{r4, r5, r6, pc}
 8001d34:	462a      	mov	r2, r5
 8001d36:	4631      	mov	r1, r6
 8001d38:	6800      	ldr	r0, [r0, #0]
 8001d3a:	f7ff ffdd 	bl	8001cf8 <_swiread>
 8001d3e:	1c43      	adds	r3, r0, #1
 8001d40:	bf1f      	itttt	ne
 8001d42:	6863      	ldrne	r3, [r4, #4]
 8001d44:	1a28      	subne	r0, r5, r0
 8001d46:	181b      	addne	r3, r3, r0
 8001d48:	6063      	strne	r3, [r4, #4]
 8001d4a:	e7f2      	b.n	8001d32 <_read+0x1a>

08001d4c <_swilseek>:
 8001d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d4e:	460c      	mov	r4, r1
 8001d50:	4616      	mov	r6, r2
 8001d52:	f7ff ff99 	bl	8001c88 <findslot>
 8001d56:	4605      	mov	r5, r0
 8001d58:	b940      	cbnz	r0, 8001d6c <_swilseek+0x20>
 8001d5a:	f000 fa3b 	bl	80021d4 <__errno>
 8001d5e:	2309      	movs	r3, #9
 8001d60:	6003      	str	r3, [r0, #0]
 8001d62:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001d66:	4620      	mov	r0, r4
 8001d68:	b003      	add	sp, #12
 8001d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d6c:	2e02      	cmp	r6, #2
 8001d6e:	d903      	bls.n	8001d78 <_swilseek+0x2c>
 8001d70:	f000 fa30 	bl	80021d4 <__errno>
 8001d74:	2316      	movs	r3, #22
 8001d76:	e7f3      	b.n	8001d60 <_swilseek+0x14>
 8001d78:	2e01      	cmp	r6, #1
 8001d7a:	d112      	bne.n	8001da2 <_swilseek+0x56>
 8001d7c:	6843      	ldr	r3, [r0, #4]
 8001d7e:	18e4      	adds	r4, r4, r3
 8001d80:	d4f6      	bmi.n	8001d70 <_swilseek+0x24>
 8001d82:	682b      	ldr	r3, [r5, #0]
 8001d84:	260a      	movs	r6, #10
 8001d86:	466f      	mov	r7, sp
 8001d88:	e9cd 3400 	strd	r3, r4, [sp]
 8001d8c:	4630      	mov	r0, r6
 8001d8e:	4639      	mov	r1, r7
 8001d90:	beab      	bkpt	0x00ab
 8001d92:	4606      	mov	r6, r0
 8001d94:	4630      	mov	r0, r6
 8001d96:	f7ff ff91 	bl	8001cbc <checkerror>
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	dbe1      	blt.n	8001d62 <_swilseek+0x16>
 8001d9e:	606c      	str	r4, [r5, #4]
 8001da0:	e7e1      	b.n	8001d66 <_swilseek+0x1a>
 8001da2:	2e02      	cmp	r6, #2
 8001da4:	d1ed      	bne.n	8001d82 <_swilseek+0x36>
 8001da6:	6803      	ldr	r3, [r0, #0]
 8001da8:	260c      	movs	r6, #12
 8001daa:	466f      	mov	r7, sp
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	4630      	mov	r0, r6
 8001db0:	4639      	mov	r1, r7
 8001db2:	beab      	bkpt	0x00ab
 8001db4:	4606      	mov	r6, r0
 8001db6:	4630      	mov	r0, r6
 8001db8:	f7ff ff80 	bl	8001cbc <checkerror>
 8001dbc:	1c43      	adds	r3, r0, #1
 8001dbe:	d0d0      	beq.n	8001d62 <_swilseek+0x16>
 8001dc0:	4404      	add	r4, r0
 8001dc2:	e7de      	b.n	8001d82 <_swilseek+0x36>

08001dc4 <_lseek>:
 8001dc4:	f7ff bfc2 	b.w	8001d4c <_swilseek>

08001dc8 <_swiwrite>:
 8001dc8:	b530      	push	{r4, r5, lr}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	2405      	movs	r4, #5
 8001dce:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001dd2:	9203      	str	r2, [sp, #12]
 8001dd4:	ad01      	add	r5, sp, #4
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	4629      	mov	r1, r5
 8001dda:	beab      	bkpt	0x00ab
 8001ddc:	4604      	mov	r4, r0
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7ff ff6c 	bl	8001cbc <checkerror>
 8001de4:	b005      	add	sp, #20
 8001de6:	bd30      	pop	{r4, r5, pc}

08001de8 <_write>:
 8001de8:	b570      	push	{r4, r5, r6, lr}
 8001dea:	460e      	mov	r6, r1
 8001dec:	4615      	mov	r5, r2
 8001dee:	f7ff ff4b 	bl	8001c88 <findslot>
 8001df2:	4604      	mov	r4, r0
 8001df4:	b930      	cbnz	r0, 8001e04 <_write+0x1c>
 8001df6:	f000 f9ed 	bl	80021d4 <__errno>
 8001dfa:	2309      	movs	r3, #9
 8001dfc:	6003      	str	r3, [r0, #0]
 8001dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e02:	bd70      	pop	{r4, r5, r6, pc}
 8001e04:	462a      	mov	r2, r5
 8001e06:	4631      	mov	r1, r6
 8001e08:	6800      	ldr	r0, [r0, #0]
 8001e0a:	f7ff ffdd 	bl	8001dc8 <_swiwrite>
 8001e0e:	1e03      	subs	r3, r0, #0
 8001e10:	dbf5      	blt.n	8001dfe <_write+0x16>
 8001e12:	6862      	ldr	r2, [r4, #4]
 8001e14:	1ae8      	subs	r0, r5, r3
 8001e16:	4402      	add	r2, r0
 8001e18:	42ab      	cmp	r3, r5
 8001e1a:	6062      	str	r2, [r4, #4]
 8001e1c:	d1f1      	bne.n	8001e02 <_write+0x1a>
 8001e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff bf5a 	b.w	8001cdc <error>

08001e28 <_swiclose>:
 8001e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e2a:	2402      	movs	r4, #2
 8001e2c:	9001      	str	r0, [sp, #4]
 8001e2e:	ad01      	add	r5, sp, #4
 8001e30:	4620      	mov	r0, r4
 8001e32:	4629      	mov	r1, r5
 8001e34:	beab      	bkpt	0x00ab
 8001e36:	4604      	mov	r4, r0
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f7ff ff3f 	bl	8001cbc <checkerror>
 8001e3e:	b003      	add	sp, #12
 8001e40:	bd30      	pop	{r4, r5, pc}
	...

08001e44 <_close>:
 8001e44:	b538      	push	{r3, r4, r5, lr}
 8001e46:	4605      	mov	r5, r0
 8001e48:	f7ff ff1e 	bl	8001c88 <findslot>
 8001e4c:	4604      	mov	r4, r0
 8001e4e:	b930      	cbnz	r0, 8001e5e <_close+0x1a>
 8001e50:	f000 f9c0 	bl	80021d4 <__errno>
 8001e54:	2309      	movs	r3, #9
 8001e56:	6003      	str	r3, [r0, #0]
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e5c:	bd38      	pop	{r3, r4, r5, pc}
 8001e5e:	3d01      	subs	r5, #1
 8001e60:	2d01      	cmp	r5, #1
 8001e62:	d809      	bhi.n	8001e78 <_close+0x34>
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <_close+0x48>)
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d104      	bne.n	8001e78 <_close+0x34>
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e72:	6003      	str	r3, [r0, #0]
 8001e74:	2000      	movs	r0, #0
 8001e76:	e7f1      	b.n	8001e5c <_close+0x18>
 8001e78:	6820      	ldr	r0, [r4, #0]
 8001e7a:	f7ff ffd5 	bl	8001e28 <_swiclose>
 8001e7e:	2800      	cmp	r0, #0
 8001e80:	d1ec      	bne.n	8001e5c <_close+0x18>
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e86:	6023      	str	r3, [r4, #0]
 8001e88:	e7e8      	b.n	8001e5c <_close+0x18>
 8001e8a:	bf00      	nop
 8001e8c:	2000012c 	.word	0x2000012c

08001e90 <_swistat>:
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	460c      	mov	r4, r1
 8001e94:	f7ff fef8 	bl	8001c88 <findslot>
 8001e98:	4605      	mov	r5, r0
 8001e9a:	b930      	cbnz	r0, 8001eaa <_swistat+0x1a>
 8001e9c:	f000 f99a 	bl	80021d4 <__errno>
 8001ea0:	2309      	movs	r3, #9
 8001ea2:	6003      	str	r3, [r0, #0]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ea8:	bd70      	pop	{r4, r5, r6, pc}
 8001eaa:	6863      	ldr	r3, [r4, #4]
 8001eac:	260c      	movs	r6, #12
 8001eae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eb2:	6063      	str	r3, [r4, #4]
 8001eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb8:	64a3      	str	r3, [r4, #72]	; 0x48
 8001eba:	4630      	mov	r0, r6
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	beab      	bkpt	0x00ab
 8001ec0:	4605      	mov	r5, r0
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	f7ff fefa 	bl	8001cbc <checkerror>
 8001ec8:	1c43      	adds	r3, r0, #1
 8001eca:	bf1c      	itt	ne
 8001ecc:	6120      	strne	r0, [r4, #16]
 8001ece:	2000      	movne	r0, #0
 8001ed0:	e7ea      	b.n	8001ea8 <_swistat+0x18>

08001ed2 <_fstat>:
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4604      	mov	r4, r0
 8001eda:	2258      	movs	r2, #88	; 0x58
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fb70 	bl	80025c2 <memset>
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001eea:	f7ff bfd1 	b.w	8001e90 <_swistat>

08001eee <_stat>:
 8001eee:	b538      	push	{r3, r4, r5, lr}
 8001ef0:	460d      	mov	r5, r1
 8001ef2:	4604      	mov	r4, r0
 8001ef4:	2258      	movs	r2, #88	; 0x58
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4628      	mov	r0, r5
 8001efa:	f000 fb62 	bl	80025c2 <memset>
 8001efe:	4620      	mov	r0, r4
 8001f00:	2100      	movs	r1, #0
 8001f02:	f000 f811 	bl	8001f28 <_swiopen>
 8001f06:	1c43      	adds	r3, r0, #1
 8001f08:	4604      	mov	r4, r0
 8001f0a:	d00b      	beq.n	8001f24 <_stat+0x36>
 8001f0c:	686b      	ldr	r3, [r5, #4]
 8001f0e:	4629      	mov	r1, r5
 8001f10:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001f14:	606b      	str	r3, [r5, #4]
 8001f16:	f7ff ffbb 	bl	8001e90 <_swistat>
 8001f1a:	4605      	mov	r5, r0
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7ff ff91 	bl	8001e44 <_close>
 8001f22:	462c      	mov	r4, r5
 8001f24:	4620      	mov	r0, r4
 8001f26:	bd38      	pop	{r3, r4, r5, pc}

08001f28 <_swiopen>:
 8001f28:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <_swiopen+0xb0>)
 8001f2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f2e:	4681      	mov	r9, r0
 8001f30:	460f      	mov	r7, r1
 8001f32:	2500      	movs	r5, #0
 8001f34:	461e      	mov	r6, r3
 8001f36:	b097      	sub	sp, #92	; 0x5c
 8001f38:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8001f3c:	1c61      	adds	r1, r4, #1
 8001f3e:	d037      	beq.n	8001fb0 <_swiopen+0x88>
 8001f40:	3501      	adds	r5, #1
 8001f42:	2d14      	cmp	r5, #20
 8001f44:	d1f8      	bne.n	8001f38 <_swiopen+0x10>
 8001f46:	f000 f945 	bl	80021d4 <__errno>
 8001f4a:	2318      	movs	r3, #24
 8001f4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001f50:	6003      	str	r3, [r0, #0]
 8001f52:	e03d      	b.n	8001fd0 <_swiopen+0xa8>
 8001f54:	f240 6301 	movw	r3, #1537	; 0x601
 8001f58:	f3c7 4400 	ubfx	r4, r7, #16, #1
 8001f5c:	07ba      	lsls	r2, r7, #30
 8001f5e:	bf48      	it	mi
 8001f60:	f044 0402 	orrmi.w	r4, r4, #2
 8001f64:	421f      	tst	r7, r3
 8001f66:	bf18      	it	ne
 8001f68:	f044 0404 	orrne.w	r4, r4, #4
 8001f6c:	073b      	lsls	r3, r7, #28
 8001f6e:	bf48      	it	mi
 8001f70:	f024 0404 	bicmi.w	r4, r4, #4
 8001f74:	4648      	mov	r0, r9
 8001f76:	bf48      	it	mi
 8001f78:	f044 0408 	orrmi.w	r4, r4, #8
 8001f7c:	f8cd 9000 	str.w	r9, [sp]
 8001f80:	f7fe f8e4 	bl	800014c <strlen>
 8001f84:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001f88:	2401      	movs	r4, #1
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4641      	mov	r1, r8
 8001f8e:	beab      	bkpt	0x00ab
 8001f90:	4604      	mov	r4, r0
 8001f92:	2c00      	cmp	r4, #0
 8001f94:	db07      	blt.n	8001fa6 <_swiopen+0x7e>
 8001f96:	2300      	movs	r3, #0
 8001f98:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 8001f9c:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8001fa0:	462c      	mov	r4, r5
 8001fa2:	6073      	str	r3, [r6, #4]
 8001fa4:	e014      	b.n	8001fd0 <_swiopen+0xa8>
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f7ff fe98 	bl	8001cdc <error>
 8001fac:	4604      	mov	r4, r0
 8001fae:	e00f      	b.n	8001fd0 <_swiopen+0xa8>
 8001fb0:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 8001fb4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001fb8:	46e8      	mov	r8, sp
 8001fba:	d1cb      	bne.n	8001f54 <_swiopen+0x2c>
 8001fbc:	4641      	mov	r1, r8
 8001fbe:	4648      	mov	r0, r9
 8001fc0:	f7ff ff95 	bl	8001eee <_stat>
 8001fc4:	3001      	adds	r0, #1
 8001fc6:	d0c5      	beq.n	8001f54 <_swiopen+0x2c>
 8001fc8:	f000 f904 	bl	80021d4 <__errno>
 8001fcc:	2311      	movs	r3, #17
 8001fce:	6003      	str	r3, [r0, #0]
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	b017      	add	sp, #92	; 0x5c
 8001fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fd8:	2000012c 	.word	0x2000012c

08001fdc <_get_semihosting_exts>:
 8001fdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001fe0:	4606      	mov	r6, r0
 8001fe2:	460f      	mov	r7, r1
 8001fe4:	482a      	ldr	r0, [pc, #168]	; (8002090 <_get_semihosting_exts+0xb4>)
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4615      	mov	r5, r2
 8001fea:	f7ff ff9d 	bl	8001f28 <_swiopen>
 8001fee:	4604      	mov	r4, r0
 8001ff0:	462a      	mov	r2, r5
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4630      	mov	r0, r6
 8001ff6:	f000 fae4 	bl	80025c2 <memset>
 8001ffa:	1c63      	adds	r3, r4, #1
 8001ffc:	d016      	beq.n	800202c <_get_semihosting_exts+0x50>
 8001ffe:	4620      	mov	r0, r4
 8002000:	f7ff fe42 	bl	8001c88 <findslot>
 8002004:	f04f 080c 	mov.w	r8, #12
 8002008:	4681      	mov	r9, r0
 800200a:	4640      	mov	r0, r8
 800200c:	4649      	mov	r1, r9
 800200e:	beab      	bkpt	0x00ab
 8002010:	4680      	mov	r8, r0
 8002012:	4640      	mov	r0, r8
 8002014:	f7ff fe52 	bl	8001cbc <checkerror>
 8002018:	2803      	cmp	r0, #3
 800201a:	dd02      	ble.n	8002022 <_get_semihosting_exts+0x46>
 800201c:	1ec3      	subs	r3, r0, #3
 800201e:	42ab      	cmp	r3, r5
 8002020:	dc08      	bgt.n	8002034 <_get_semihosting_exts+0x58>
 8002022:	4620      	mov	r0, r4
 8002024:	f7ff ff0e 	bl	8001e44 <_close>
 8002028:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800202c:	4620      	mov	r0, r4
 800202e:	b003      	add	sp, #12
 8002030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002034:	2204      	movs	r2, #4
 8002036:	4620      	mov	r0, r4
 8002038:	eb0d 0102 	add.w	r1, sp, r2
 800203c:	f7ff fe6c 	bl	8001d18 <_read>
 8002040:	2803      	cmp	r0, #3
 8002042:	ddee      	ble.n	8002022 <_get_semihosting_exts+0x46>
 8002044:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002048:	2b53      	cmp	r3, #83	; 0x53
 800204a:	d1ea      	bne.n	8002022 <_get_semihosting_exts+0x46>
 800204c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002050:	2b48      	cmp	r3, #72	; 0x48
 8002052:	d1e6      	bne.n	8002022 <_get_semihosting_exts+0x46>
 8002054:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002058:	2b46      	cmp	r3, #70	; 0x46
 800205a:	d1e2      	bne.n	8002022 <_get_semihosting_exts+0x46>
 800205c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002060:	2b42      	cmp	r3, #66	; 0x42
 8002062:	d1de      	bne.n	8002022 <_get_semihosting_exts+0x46>
 8002064:	2201      	movs	r2, #1
 8002066:	4639      	mov	r1, r7
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff fe6f 	bl	8001d4c <_swilseek>
 800206e:	2800      	cmp	r0, #0
 8002070:	dbd7      	blt.n	8002022 <_get_semihosting_exts+0x46>
 8002072:	462a      	mov	r2, r5
 8002074:	4631      	mov	r1, r6
 8002076:	4620      	mov	r0, r4
 8002078:	f7ff fe4e 	bl	8001d18 <_read>
 800207c:	4605      	mov	r5, r0
 800207e:	4620      	mov	r0, r4
 8002080:	f7ff fee0 	bl	8001e44 <_close>
 8002084:	4628      	mov	r0, r5
 8002086:	f7ff fe19 	bl	8001cbc <checkerror>
 800208a:	4604      	mov	r4, r0
 800208c:	e7ce      	b.n	800202c <_get_semihosting_exts+0x50>
 800208e:	bf00      	nop
 8002090:	080037a8 	.word	0x080037a8

08002094 <initialise_semihosting_exts>:
 8002094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002096:	2100      	movs	r1, #0
 8002098:	2201      	movs	r2, #1
 800209a:	4d09      	ldr	r5, [pc, #36]	; (80020c0 <initialise_semihosting_exts+0x2c>)
 800209c:	4c09      	ldr	r4, [pc, #36]	; (80020c4 <initialise_semihosting_exts+0x30>)
 800209e:	a801      	add	r0, sp, #4
 80020a0:	6029      	str	r1, [r5, #0]
 80020a2:	6022      	str	r2, [r4, #0]
 80020a4:	f7ff ff9a 	bl	8001fdc <_get_semihosting_exts>
 80020a8:	2800      	cmp	r0, #0
 80020aa:	dd07      	ble.n	80020bc <initialise_semihosting_exts+0x28>
 80020ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80020b0:	f003 0201 	and.w	r2, r3, #1
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	602a      	str	r2, [r5, #0]
 80020ba:	6023      	str	r3, [r4, #0]
 80020bc:	b003      	add	sp, #12
 80020be:	bd30      	pop	{r4, r5, pc}
 80020c0:	20000050 	.word	0x20000050
 80020c4:	20000054 	.word	0x20000054

080020c8 <_has_ext_stdout_stderr>:
 80020c8:	b510      	push	{r4, lr}
 80020ca:	4c04      	ldr	r4, [pc, #16]	; (80020dc <_has_ext_stdout_stderr+0x14>)
 80020cc:	6822      	ldr	r2, [r4, #0]
 80020ce:	2a00      	cmp	r2, #0
 80020d0:	da01      	bge.n	80020d6 <_has_ext_stdout_stderr+0xe>
 80020d2:	f7ff ffdf 	bl	8002094 <initialise_semihosting_exts>
 80020d6:	6820      	ldr	r0, [r4, #0]
 80020d8:	bd10      	pop	{r4, pc}
 80020da:	bf00      	nop
 80020dc:	20000054 	.word	0x20000054

080020e0 <initialise_monitor_handles>:
 80020e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020e4:	2303      	movs	r3, #3
 80020e6:	2400      	movs	r4, #0
 80020e8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8002198 <initialise_monitor_handles+0xb8>
 80020ec:	b085      	sub	sp, #20
 80020ee:	f8cd 9004 	str.w	r9, [sp, #4]
 80020f2:	f10d 0804 	add.w	r8, sp, #4
 80020f6:	9303      	str	r3, [sp, #12]
 80020f8:	2501      	movs	r5, #1
 80020fa:	9402      	str	r4, [sp, #8]
 80020fc:	4628      	mov	r0, r5
 80020fe:	4641      	mov	r1, r8
 8002100:	beab      	bkpt	0x00ab
 8002102:	4605      	mov	r5, r0
 8002104:	4a20      	ldr	r2, [pc, #128]	; (8002188 <initialise_monitor_handles+0xa8>)
 8002106:	4623      	mov	r3, r4
 8002108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800210c:	4614      	mov	r4, r2
 800210e:	4e1f      	ldr	r6, [pc, #124]	; (800218c <initialise_monitor_handles+0xac>)
 8002110:	6035      	str	r5, [r6, #0]
 8002112:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8002116:	3301      	adds	r3, #1
 8002118:	2b14      	cmp	r3, #20
 800211a:	d1fa      	bne.n	8002112 <initialise_monitor_handles+0x32>
 800211c:	f7ff ffd4 	bl	80020c8 <_has_ext_stdout_stderr>
 8002120:	4d1b      	ldr	r5, [pc, #108]	; (8002190 <initialise_monitor_handles+0xb0>)
 8002122:	b1d0      	cbz	r0, 800215a <initialise_monitor_handles+0x7a>
 8002124:	f04f 0a03 	mov.w	sl, #3
 8002128:	2304      	movs	r3, #4
 800212a:	f8cd 9004 	str.w	r9, [sp, #4]
 800212e:	2701      	movs	r7, #1
 8002130:	f8cd a00c 	str.w	sl, [sp, #12]
 8002134:	9302      	str	r3, [sp, #8]
 8002136:	4638      	mov	r0, r7
 8002138:	4641      	mov	r1, r8
 800213a:	beab      	bkpt	0x00ab
 800213c:	4683      	mov	fp, r0
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <initialise_monitor_handles+0xb4>)
 8002140:	f8cd 9004 	str.w	r9, [sp, #4]
 8002144:	f8c3 b000 	str.w	fp, [r3]
 8002148:	2308      	movs	r3, #8
 800214a:	f8cd a00c 	str.w	sl, [sp, #12]
 800214e:	9302      	str	r3, [sp, #8]
 8002150:	4638      	mov	r0, r7
 8002152:	4641      	mov	r1, r8
 8002154:	beab      	bkpt	0x00ab
 8002156:	4607      	mov	r7, r0
 8002158:	602f      	str	r7, [r5, #0]
 800215a:	682b      	ldr	r3, [r5, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	bf02      	ittt	eq
 8002160:	4b0c      	ldreq	r3, [pc, #48]	; (8002194 <initialise_monitor_handles+0xb4>)
 8002162:	681b      	ldreq	r3, [r3, #0]
 8002164:	602b      	streq	r3, [r5, #0]
 8002166:	6833      	ldr	r3, [r6, #0]
 8002168:	2600      	movs	r6, #0
 800216a:	6023      	str	r3, [r4, #0]
 800216c:	6066      	str	r6, [r4, #4]
 800216e:	f7ff ffab 	bl	80020c8 <_has_ext_stdout_stderr>
 8002172:	b130      	cbz	r0, 8002182 <initialise_monitor_handles+0xa2>
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <initialise_monitor_handles+0xb4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800217c:	682b      	ldr	r3, [r5, #0]
 800217e:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002182:	b005      	add	sp, #20
 8002184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002188:	2000012c 	.word	0x2000012c
 800218c:	20000124 	.word	0x20000124
 8002190:	20000120 	.word	0x20000120
 8002194:	20000128 	.word	0x20000128
 8002198:	080037be 	.word	0x080037be

0800219c <_isatty>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	f7ff fd73 	bl	8001c88 <findslot>
 80021a2:	2509      	movs	r5, #9
 80021a4:	4604      	mov	r4, r0
 80021a6:	b920      	cbnz	r0, 80021b2 <_isatty+0x16>
 80021a8:	f000 f814 	bl	80021d4 <__errno>
 80021ac:	6005      	str	r5, [r0, #0]
 80021ae:	4620      	mov	r0, r4
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
 80021b2:	4628      	mov	r0, r5
 80021b4:	4621      	mov	r1, r4
 80021b6:	beab      	bkpt	0x00ab
 80021b8:	4604      	mov	r4, r0
 80021ba:	2c01      	cmp	r4, #1
 80021bc:	d0f7      	beq.n	80021ae <_isatty+0x12>
 80021be:	f000 f809 	bl	80021d4 <__errno>
 80021c2:	2400      	movs	r4, #0
 80021c4:	4605      	mov	r5, r0
 80021c6:	2613      	movs	r6, #19
 80021c8:	4630      	mov	r0, r6
 80021ca:	4621      	mov	r1, r4
 80021cc:	beab      	bkpt	0x00ab
 80021ce:	4606      	mov	r6, r0
 80021d0:	602e      	str	r6, [r5, #0]
 80021d2:	e7ec      	b.n	80021ae <_isatty+0x12>

080021d4 <__errno>:
 80021d4:	4b01      	ldr	r3, [pc, #4]	; (80021dc <__errno+0x8>)
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000058 	.word	0x20000058

080021e0 <__sflush_r>:
 80021e0:	898a      	ldrh	r2, [r1, #12]
 80021e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021e6:	4605      	mov	r5, r0
 80021e8:	0710      	lsls	r0, r2, #28
 80021ea:	460c      	mov	r4, r1
 80021ec:	d458      	bmi.n	80022a0 <__sflush_r+0xc0>
 80021ee:	684b      	ldr	r3, [r1, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	dc05      	bgt.n	8002200 <__sflush_r+0x20>
 80021f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	dc02      	bgt.n	8002200 <__sflush_r+0x20>
 80021fa:	2000      	movs	r0, #0
 80021fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002202:	2e00      	cmp	r6, #0
 8002204:	d0f9      	beq.n	80021fa <__sflush_r+0x1a>
 8002206:	2300      	movs	r3, #0
 8002208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800220c:	682f      	ldr	r7, [r5, #0]
 800220e:	602b      	str	r3, [r5, #0]
 8002210:	d032      	beq.n	8002278 <__sflush_r+0x98>
 8002212:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002214:	89a3      	ldrh	r3, [r4, #12]
 8002216:	075a      	lsls	r2, r3, #29
 8002218:	d505      	bpl.n	8002226 <__sflush_r+0x46>
 800221a:	6863      	ldr	r3, [r4, #4]
 800221c:	1ac0      	subs	r0, r0, r3
 800221e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002220:	b10b      	cbz	r3, 8002226 <__sflush_r+0x46>
 8002222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002224:	1ac0      	subs	r0, r0, r3
 8002226:	2300      	movs	r3, #0
 8002228:	4602      	mov	r2, r0
 800222a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800222c:	4628      	mov	r0, r5
 800222e:	6a21      	ldr	r1, [r4, #32]
 8002230:	47b0      	blx	r6
 8002232:	1c43      	adds	r3, r0, #1
 8002234:	89a3      	ldrh	r3, [r4, #12]
 8002236:	d106      	bne.n	8002246 <__sflush_r+0x66>
 8002238:	6829      	ldr	r1, [r5, #0]
 800223a:	291d      	cmp	r1, #29
 800223c:	d82c      	bhi.n	8002298 <__sflush_r+0xb8>
 800223e:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <__sflush_r+0x108>)
 8002240:	40ca      	lsrs	r2, r1
 8002242:	07d6      	lsls	r6, r2, #31
 8002244:	d528      	bpl.n	8002298 <__sflush_r+0xb8>
 8002246:	2200      	movs	r2, #0
 8002248:	6062      	str	r2, [r4, #4]
 800224a:	6922      	ldr	r2, [r4, #16]
 800224c:	04d9      	lsls	r1, r3, #19
 800224e:	6022      	str	r2, [r4, #0]
 8002250:	d504      	bpl.n	800225c <__sflush_r+0x7c>
 8002252:	1c42      	adds	r2, r0, #1
 8002254:	d101      	bne.n	800225a <__sflush_r+0x7a>
 8002256:	682b      	ldr	r3, [r5, #0]
 8002258:	b903      	cbnz	r3, 800225c <__sflush_r+0x7c>
 800225a:	6560      	str	r0, [r4, #84]	; 0x54
 800225c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800225e:	602f      	str	r7, [r5, #0]
 8002260:	2900      	cmp	r1, #0
 8002262:	d0ca      	beq.n	80021fa <__sflush_r+0x1a>
 8002264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002268:	4299      	cmp	r1, r3
 800226a:	d002      	beq.n	8002272 <__sflush_r+0x92>
 800226c:	4628      	mov	r0, r5
 800226e:	f000 f9b1 	bl	80025d4 <_free_r>
 8002272:	2000      	movs	r0, #0
 8002274:	6360      	str	r0, [r4, #52]	; 0x34
 8002276:	e7c1      	b.n	80021fc <__sflush_r+0x1c>
 8002278:	6a21      	ldr	r1, [r4, #32]
 800227a:	2301      	movs	r3, #1
 800227c:	4628      	mov	r0, r5
 800227e:	47b0      	blx	r6
 8002280:	1c41      	adds	r1, r0, #1
 8002282:	d1c7      	bne.n	8002214 <__sflush_r+0x34>
 8002284:	682b      	ldr	r3, [r5, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0c4      	beq.n	8002214 <__sflush_r+0x34>
 800228a:	2b1d      	cmp	r3, #29
 800228c:	d001      	beq.n	8002292 <__sflush_r+0xb2>
 800228e:	2b16      	cmp	r3, #22
 8002290:	d101      	bne.n	8002296 <__sflush_r+0xb6>
 8002292:	602f      	str	r7, [r5, #0]
 8002294:	e7b1      	b.n	80021fa <__sflush_r+0x1a>
 8002296:	89a3      	ldrh	r3, [r4, #12]
 8002298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800229c:	81a3      	strh	r3, [r4, #12]
 800229e:	e7ad      	b.n	80021fc <__sflush_r+0x1c>
 80022a0:	690f      	ldr	r7, [r1, #16]
 80022a2:	2f00      	cmp	r7, #0
 80022a4:	d0a9      	beq.n	80021fa <__sflush_r+0x1a>
 80022a6:	0793      	lsls	r3, r2, #30
 80022a8:	bf18      	it	ne
 80022aa:	2300      	movne	r3, #0
 80022ac:	680e      	ldr	r6, [r1, #0]
 80022ae:	bf08      	it	eq
 80022b0:	694b      	ldreq	r3, [r1, #20]
 80022b2:	eba6 0807 	sub.w	r8, r6, r7
 80022b6:	600f      	str	r7, [r1, #0]
 80022b8:	608b      	str	r3, [r1, #8]
 80022ba:	f1b8 0f00 	cmp.w	r8, #0
 80022be:	dd9c      	ble.n	80021fa <__sflush_r+0x1a>
 80022c0:	4643      	mov	r3, r8
 80022c2:	463a      	mov	r2, r7
 80022c4:	4628      	mov	r0, r5
 80022c6:	6a21      	ldr	r1, [r4, #32]
 80022c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80022ca:	47b0      	blx	r6
 80022cc:	2800      	cmp	r0, #0
 80022ce:	dc06      	bgt.n	80022de <__sflush_r+0xfe>
 80022d0:	89a3      	ldrh	r3, [r4, #12]
 80022d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022da:	81a3      	strh	r3, [r4, #12]
 80022dc:	e78e      	b.n	80021fc <__sflush_r+0x1c>
 80022de:	4407      	add	r7, r0
 80022e0:	eba8 0800 	sub.w	r8, r8, r0
 80022e4:	e7e9      	b.n	80022ba <__sflush_r+0xda>
 80022e6:	bf00      	nop
 80022e8:	20400001 	.word	0x20400001

080022ec <_fflush_r>:
 80022ec:	b538      	push	{r3, r4, r5, lr}
 80022ee:	690b      	ldr	r3, [r1, #16]
 80022f0:	4605      	mov	r5, r0
 80022f2:	460c      	mov	r4, r1
 80022f4:	b913      	cbnz	r3, 80022fc <_fflush_r+0x10>
 80022f6:	2500      	movs	r5, #0
 80022f8:	4628      	mov	r0, r5
 80022fa:	bd38      	pop	{r3, r4, r5, pc}
 80022fc:	b118      	cbz	r0, 8002306 <_fflush_r+0x1a>
 80022fe:	6983      	ldr	r3, [r0, #24]
 8002300:	b90b      	cbnz	r3, 8002306 <_fflush_r+0x1a>
 8002302:	f000 f899 	bl	8002438 <__sinit>
 8002306:	4b14      	ldr	r3, [pc, #80]	; (8002358 <_fflush_r+0x6c>)
 8002308:	429c      	cmp	r4, r3
 800230a:	d11b      	bne.n	8002344 <_fflush_r+0x58>
 800230c:	686c      	ldr	r4, [r5, #4]
 800230e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0ef      	beq.n	80022f6 <_fflush_r+0xa>
 8002316:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002318:	07d0      	lsls	r0, r2, #31
 800231a:	d404      	bmi.n	8002326 <_fflush_r+0x3a>
 800231c:	0599      	lsls	r1, r3, #22
 800231e:	d402      	bmi.n	8002326 <_fflush_r+0x3a>
 8002320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002322:	f000 f94c 	bl	80025be <__retarget_lock_acquire_recursive>
 8002326:	4628      	mov	r0, r5
 8002328:	4621      	mov	r1, r4
 800232a:	f7ff ff59 	bl	80021e0 <__sflush_r>
 800232e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002330:	4605      	mov	r5, r0
 8002332:	07da      	lsls	r2, r3, #31
 8002334:	d4e0      	bmi.n	80022f8 <_fflush_r+0xc>
 8002336:	89a3      	ldrh	r3, [r4, #12]
 8002338:	059b      	lsls	r3, r3, #22
 800233a:	d4dd      	bmi.n	80022f8 <_fflush_r+0xc>
 800233c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800233e:	f000 f93f 	bl	80025c0 <__retarget_lock_release_recursive>
 8002342:	e7d9      	b.n	80022f8 <_fflush_r+0xc>
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <_fflush_r+0x70>)
 8002346:	429c      	cmp	r4, r3
 8002348:	d101      	bne.n	800234e <_fflush_r+0x62>
 800234a:	68ac      	ldr	r4, [r5, #8]
 800234c:	e7df      	b.n	800230e <_fflush_r+0x22>
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <_fflush_r+0x74>)
 8002350:	429c      	cmp	r4, r3
 8002352:	bf08      	it	eq
 8002354:	68ec      	ldreq	r4, [r5, #12]
 8002356:	e7da      	b.n	800230e <_fflush_r+0x22>
 8002358:	080037e4 	.word	0x080037e4
 800235c:	08003804 	.word	0x08003804
 8002360:	080037c4 	.word	0x080037c4

08002364 <fflush>:
 8002364:	4601      	mov	r1, r0
 8002366:	b920      	cbnz	r0, 8002372 <fflush+0xe>
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <fflush+0x18>)
 800236a:	4905      	ldr	r1, [pc, #20]	; (8002380 <fflush+0x1c>)
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	f000 b8e1 	b.w	8002534 <_fwalk_reent>
 8002372:	4b04      	ldr	r3, [pc, #16]	; (8002384 <fflush+0x20>)
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	f7ff bfb9 	b.w	80022ec <_fflush_r>
 800237a:	bf00      	nop
 800237c:	08003824 	.word	0x08003824
 8002380:	080022ed 	.word	0x080022ed
 8002384:	20000058 	.word	0x20000058

08002388 <std>:
 8002388:	2300      	movs	r3, #0
 800238a:	b510      	push	{r4, lr}
 800238c:	4604      	mov	r4, r0
 800238e:	e9c0 3300 	strd	r3, r3, [r0]
 8002392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002396:	6083      	str	r3, [r0, #8]
 8002398:	8181      	strh	r1, [r0, #12]
 800239a:	6643      	str	r3, [r0, #100]	; 0x64
 800239c:	81c2      	strh	r2, [r0, #14]
 800239e:	6183      	str	r3, [r0, #24]
 80023a0:	4619      	mov	r1, r3
 80023a2:	2208      	movs	r2, #8
 80023a4:	305c      	adds	r0, #92	; 0x5c
 80023a6:	f000 f90c 	bl	80025c2 <memset>
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <std+0x38>)
 80023ac:	6224      	str	r4, [r4, #32]
 80023ae:	6263      	str	r3, [r4, #36]	; 0x24
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <std+0x3c>)
 80023b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <std+0x40>)
 80023b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <std+0x44>)
 80023ba:	6323      	str	r3, [r4, #48]	; 0x30
 80023bc:	bd10      	pop	{r4, pc}
 80023be:	bf00      	nop
 80023c0:	080027d9 	.word	0x080027d9
 80023c4:	080027fb 	.word	0x080027fb
 80023c8:	08002833 	.word	0x08002833
 80023cc:	08002857 	.word	0x08002857

080023d0 <_cleanup_r>:
 80023d0:	4901      	ldr	r1, [pc, #4]	; (80023d8 <_cleanup_r+0x8>)
 80023d2:	f000 b8af 	b.w	8002534 <_fwalk_reent>
 80023d6:	bf00      	nop
 80023d8:	080022ed 	.word	0x080022ed

080023dc <__sfmoreglue>:
 80023dc:	b570      	push	{r4, r5, r6, lr}
 80023de:	2568      	movs	r5, #104	; 0x68
 80023e0:	1e4a      	subs	r2, r1, #1
 80023e2:	4355      	muls	r5, r2
 80023e4:	460e      	mov	r6, r1
 80023e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80023ea:	f000 f93f 	bl	800266c <_malloc_r>
 80023ee:	4604      	mov	r4, r0
 80023f0:	b140      	cbz	r0, 8002404 <__sfmoreglue+0x28>
 80023f2:	2100      	movs	r1, #0
 80023f4:	e9c0 1600 	strd	r1, r6, [r0]
 80023f8:	300c      	adds	r0, #12
 80023fa:	60a0      	str	r0, [r4, #8]
 80023fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002400:	f000 f8df 	bl	80025c2 <memset>
 8002404:	4620      	mov	r0, r4
 8002406:	bd70      	pop	{r4, r5, r6, pc}

08002408 <__sfp_lock_acquire>:
 8002408:	4801      	ldr	r0, [pc, #4]	; (8002410 <__sfp_lock_acquire+0x8>)
 800240a:	f000 b8d8 	b.w	80025be <__retarget_lock_acquire_recursive>
 800240e:	bf00      	nop
 8002410:	20000240 	.word	0x20000240

08002414 <__sfp_lock_release>:
 8002414:	4801      	ldr	r0, [pc, #4]	; (800241c <__sfp_lock_release+0x8>)
 8002416:	f000 b8d3 	b.w	80025c0 <__retarget_lock_release_recursive>
 800241a:	bf00      	nop
 800241c:	20000240 	.word	0x20000240

08002420 <__sinit_lock_acquire>:
 8002420:	4801      	ldr	r0, [pc, #4]	; (8002428 <__sinit_lock_acquire+0x8>)
 8002422:	f000 b8cc 	b.w	80025be <__retarget_lock_acquire_recursive>
 8002426:	bf00      	nop
 8002428:	2000023b 	.word	0x2000023b

0800242c <__sinit_lock_release>:
 800242c:	4801      	ldr	r0, [pc, #4]	; (8002434 <__sinit_lock_release+0x8>)
 800242e:	f000 b8c7 	b.w	80025c0 <__retarget_lock_release_recursive>
 8002432:	bf00      	nop
 8002434:	2000023b 	.word	0x2000023b

08002438 <__sinit>:
 8002438:	b510      	push	{r4, lr}
 800243a:	4604      	mov	r4, r0
 800243c:	f7ff fff0 	bl	8002420 <__sinit_lock_acquire>
 8002440:	69a3      	ldr	r3, [r4, #24]
 8002442:	b11b      	cbz	r3, 800244c <__sinit+0x14>
 8002444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002448:	f7ff bff0 	b.w	800242c <__sinit_lock_release>
 800244c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002450:	6523      	str	r3, [r4, #80]	; 0x50
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <__sinit+0x68>)
 8002454:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <__sinit+0x6c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	62a2      	str	r2, [r4, #40]	; 0x28
 800245a:	42a3      	cmp	r3, r4
 800245c:	bf08      	it	eq
 800245e:	2301      	moveq	r3, #1
 8002460:	4620      	mov	r0, r4
 8002462:	bf08      	it	eq
 8002464:	61a3      	streq	r3, [r4, #24]
 8002466:	f000 f81f 	bl	80024a8 <__sfp>
 800246a:	6060      	str	r0, [r4, #4]
 800246c:	4620      	mov	r0, r4
 800246e:	f000 f81b 	bl	80024a8 <__sfp>
 8002472:	60a0      	str	r0, [r4, #8]
 8002474:	4620      	mov	r0, r4
 8002476:	f000 f817 	bl	80024a8 <__sfp>
 800247a:	2200      	movs	r2, #0
 800247c:	2104      	movs	r1, #4
 800247e:	60e0      	str	r0, [r4, #12]
 8002480:	6860      	ldr	r0, [r4, #4]
 8002482:	f7ff ff81 	bl	8002388 <std>
 8002486:	2201      	movs	r2, #1
 8002488:	2109      	movs	r1, #9
 800248a:	68a0      	ldr	r0, [r4, #8]
 800248c:	f7ff ff7c 	bl	8002388 <std>
 8002490:	2202      	movs	r2, #2
 8002492:	2112      	movs	r1, #18
 8002494:	68e0      	ldr	r0, [r4, #12]
 8002496:	f7ff ff77 	bl	8002388 <std>
 800249a:	2301      	movs	r3, #1
 800249c:	61a3      	str	r3, [r4, #24]
 800249e:	e7d1      	b.n	8002444 <__sinit+0xc>
 80024a0:	08003824 	.word	0x08003824
 80024a4:	080023d1 	.word	0x080023d1

080024a8 <__sfp>:
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024aa:	4607      	mov	r7, r0
 80024ac:	f7ff ffac 	bl	8002408 <__sfp_lock_acquire>
 80024b0:	4b1e      	ldr	r3, [pc, #120]	; (800252c <__sfp+0x84>)
 80024b2:	681e      	ldr	r6, [r3, #0]
 80024b4:	69b3      	ldr	r3, [r6, #24]
 80024b6:	b913      	cbnz	r3, 80024be <__sfp+0x16>
 80024b8:	4630      	mov	r0, r6
 80024ba:	f7ff ffbd 	bl	8002438 <__sinit>
 80024be:	3648      	adds	r6, #72	; 0x48
 80024c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	d503      	bpl.n	80024d0 <__sfp+0x28>
 80024c8:	6833      	ldr	r3, [r6, #0]
 80024ca:	b30b      	cbz	r3, 8002510 <__sfp+0x68>
 80024cc:	6836      	ldr	r6, [r6, #0]
 80024ce:	e7f7      	b.n	80024c0 <__sfp+0x18>
 80024d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80024d4:	b9d5      	cbnz	r5, 800250c <__sfp+0x64>
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <__sfp+0x88>)
 80024d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80024dc:	60e3      	str	r3, [r4, #12]
 80024de:	6665      	str	r5, [r4, #100]	; 0x64
 80024e0:	f000 f86c 	bl	80025bc <__retarget_lock_init_recursive>
 80024e4:	f7ff ff96 	bl	8002414 <__sfp_lock_release>
 80024e8:	2208      	movs	r2, #8
 80024ea:	4629      	mov	r1, r5
 80024ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80024f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80024f4:	6025      	str	r5, [r4, #0]
 80024f6:	61a5      	str	r5, [r4, #24]
 80024f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80024fc:	f000 f861 	bl	80025c2 <memset>
 8002500:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002504:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002508:	4620      	mov	r0, r4
 800250a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800250c:	3468      	adds	r4, #104	; 0x68
 800250e:	e7d9      	b.n	80024c4 <__sfp+0x1c>
 8002510:	2104      	movs	r1, #4
 8002512:	4638      	mov	r0, r7
 8002514:	f7ff ff62 	bl	80023dc <__sfmoreglue>
 8002518:	4604      	mov	r4, r0
 800251a:	6030      	str	r0, [r6, #0]
 800251c:	2800      	cmp	r0, #0
 800251e:	d1d5      	bne.n	80024cc <__sfp+0x24>
 8002520:	f7ff ff78 	bl	8002414 <__sfp_lock_release>
 8002524:	230c      	movs	r3, #12
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	e7ee      	b.n	8002508 <__sfp+0x60>
 800252a:	bf00      	nop
 800252c:	08003824 	.word	0x08003824
 8002530:	ffff0001 	.word	0xffff0001

08002534 <_fwalk_reent>:
 8002534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002538:	4606      	mov	r6, r0
 800253a:	4688      	mov	r8, r1
 800253c:	2700      	movs	r7, #0
 800253e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002542:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002546:	f1b9 0901 	subs.w	r9, r9, #1
 800254a:	d505      	bpl.n	8002558 <_fwalk_reent+0x24>
 800254c:	6824      	ldr	r4, [r4, #0]
 800254e:	2c00      	cmp	r4, #0
 8002550:	d1f7      	bne.n	8002542 <_fwalk_reent+0xe>
 8002552:	4638      	mov	r0, r7
 8002554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002558:	89ab      	ldrh	r3, [r5, #12]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d907      	bls.n	800256e <_fwalk_reent+0x3a>
 800255e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002562:	3301      	adds	r3, #1
 8002564:	d003      	beq.n	800256e <_fwalk_reent+0x3a>
 8002566:	4629      	mov	r1, r5
 8002568:	4630      	mov	r0, r6
 800256a:	47c0      	blx	r8
 800256c:	4307      	orrs	r7, r0
 800256e:	3568      	adds	r5, #104	; 0x68
 8002570:	e7e9      	b.n	8002546 <_fwalk_reent+0x12>
	...

08002574 <__libc_init_array>:
 8002574:	b570      	push	{r4, r5, r6, lr}
 8002576:	2600      	movs	r6, #0
 8002578:	4d0c      	ldr	r5, [pc, #48]	; (80025ac <__libc_init_array+0x38>)
 800257a:	4c0d      	ldr	r4, [pc, #52]	; (80025b0 <__libc_init_array+0x3c>)
 800257c:	1b64      	subs	r4, r4, r5
 800257e:	10a4      	asrs	r4, r4, #2
 8002580:	42a6      	cmp	r6, r4
 8002582:	d109      	bne.n	8002598 <__libc_init_array+0x24>
 8002584:	f000 ffb2 	bl	80034ec <_init>
 8002588:	2600      	movs	r6, #0
 800258a:	4d0a      	ldr	r5, [pc, #40]	; (80025b4 <__libc_init_array+0x40>)
 800258c:	4c0a      	ldr	r4, [pc, #40]	; (80025b8 <__libc_init_array+0x44>)
 800258e:	1b64      	subs	r4, r4, r5
 8002590:	10a4      	asrs	r4, r4, #2
 8002592:	42a6      	cmp	r6, r4
 8002594:	d105      	bne.n	80025a2 <__libc_init_array+0x2e>
 8002596:	bd70      	pop	{r4, r5, r6, pc}
 8002598:	f855 3b04 	ldr.w	r3, [r5], #4
 800259c:	4798      	blx	r3
 800259e:	3601      	adds	r6, #1
 80025a0:	e7ee      	b.n	8002580 <__libc_init_array+0xc>
 80025a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025a6:	4798      	blx	r3
 80025a8:	3601      	adds	r6, #1
 80025aa:	e7f2      	b.n	8002592 <__libc_init_array+0x1e>
 80025ac:	0800385c 	.word	0x0800385c
 80025b0:	0800385c 	.word	0x0800385c
 80025b4:	0800385c 	.word	0x0800385c
 80025b8:	08003860 	.word	0x08003860

080025bc <__retarget_lock_init_recursive>:
 80025bc:	4770      	bx	lr

080025be <__retarget_lock_acquire_recursive>:
 80025be:	4770      	bx	lr

080025c0 <__retarget_lock_release_recursive>:
 80025c0:	4770      	bx	lr

080025c2 <memset>:
 80025c2:	4603      	mov	r3, r0
 80025c4:	4402      	add	r2, r0
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d100      	bne.n	80025cc <memset+0xa>
 80025ca:	4770      	bx	lr
 80025cc:	f803 1b01 	strb.w	r1, [r3], #1
 80025d0:	e7f9      	b.n	80025c6 <memset+0x4>
	...

080025d4 <_free_r>:
 80025d4:	b538      	push	{r3, r4, r5, lr}
 80025d6:	4605      	mov	r5, r0
 80025d8:	2900      	cmp	r1, #0
 80025da:	d043      	beq.n	8002664 <_free_r+0x90>
 80025dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025e0:	1f0c      	subs	r4, r1, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bfb8      	it	lt
 80025e6:	18e4      	addlt	r4, r4, r3
 80025e8:	f000 f96e 	bl	80028c8 <__malloc_lock>
 80025ec:	4a1e      	ldr	r2, [pc, #120]	; (8002668 <_free_r+0x94>)
 80025ee:	6813      	ldr	r3, [r2, #0]
 80025f0:	4610      	mov	r0, r2
 80025f2:	b933      	cbnz	r3, 8002602 <_free_r+0x2e>
 80025f4:	6063      	str	r3, [r4, #4]
 80025f6:	6014      	str	r4, [r2, #0]
 80025f8:	4628      	mov	r0, r5
 80025fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025fe:	f000 b969 	b.w	80028d4 <__malloc_unlock>
 8002602:	42a3      	cmp	r3, r4
 8002604:	d90a      	bls.n	800261c <_free_r+0x48>
 8002606:	6821      	ldr	r1, [r4, #0]
 8002608:	1862      	adds	r2, r4, r1
 800260a:	4293      	cmp	r3, r2
 800260c:	bf01      	itttt	eq
 800260e:	681a      	ldreq	r2, [r3, #0]
 8002610:	685b      	ldreq	r3, [r3, #4]
 8002612:	1852      	addeq	r2, r2, r1
 8002614:	6022      	streq	r2, [r4, #0]
 8002616:	6063      	str	r3, [r4, #4]
 8002618:	6004      	str	r4, [r0, #0]
 800261a:	e7ed      	b.n	80025f8 <_free_r+0x24>
 800261c:	461a      	mov	r2, r3
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	b10b      	cbz	r3, 8002626 <_free_r+0x52>
 8002622:	42a3      	cmp	r3, r4
 8002624:	d9fa      	bls.n	800261c <_free_r+0x48>
 8002626:	6811      	ldr	r1, [r2, #0]
 8002628:	1850      	adds	r0, r2, r1
 800262a:	42a0      	cmp	r0, r4
 800262c:	d10b      	bne.n	8002646 <_free_r+0x72>
 800262e:	6820      	ldr	r0, [r4, #0]
 8002630:	4401      	add	r1, r0
 8002632:	1850      	adds	r0, r2, r1
 8002634:	4283      	cmp	r3, r0
 8002636:	6011      	str	r1, [r2, #0]
 8002638:	d1de      	bne.n	80025f8 <_free_r+0x24>
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4401      	add	r1, r0
 8002640:	6011      	str	r1, [r2, #0]
 8002642:	6053      	str	r3, [r2, #4]
 8002644:	e7d8      	b.n	80025f8 <_free_r+0x24>
 8002646:	d902      	bls.n	800264e <_free_r+0x7a>
 8002648:	230c      	movs	r3, #12
 800264a:	602b      	str	r3, [r5, #0]
 800264c:	e7d4      	b.n	80025f8 <_free_r+0x24>
 800264e:	6820      	ldr	r0, [r4, #0]
 8002650:	1821      	adds	r1, r4, r0
 8002652:	428b      	cmp	r3, r1
 8002654:	bf01      	itttt	eq
 8002656:	6819      	ldreq	r1, [r3, #0]
 8002658:	685b      	ldreq	r3, [r3, #4]
 800265a:	1809      	addeq	r1, r1, r0
 800265c:	6021      	streq	r1, [r4, #0]
 800265e:	6063      	str	r3, [r4, #4]
 8002660:	6054      	str	r4, [r2, #4]
 8002662:	e7c9      	b.n	80025f8 <_free_r+0x24>
 8002664:	bd38      	pop	{r3, r4, r5, pc}
 8002666:	bf00      	nop
 8002668:	200001cc 	.word	0x200001cc

0800266c <_malloc_r>:
 800266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266e:	1ccd      	adds	r5, r1, #3
 8002670:	f025 0503 	bic.w	r5, r5, #3
 8002674:	3508      	adds	r5, #8
 8002676:	2d0c      	cmp	r5, #12
 8002678:	bf38      	it	cc
 800267a:	250c      	movcc	r5, #12
 800267c:	2d00      	cmp	r5, #0
 800267e:	4606      	mov	r6, r0
 8002680:	db01      	blt.n	8002686 <_malloc_r+0x1a>
 8002682:	42a9      	cmp	r1, r5
 8002684:	d903      	bls.n	800268e <_malloc_r+0x22>
 8002686:	230c      	movs	r3, #12
 8002688:	6033      	str	r3, [r6, #0]
 800268a:	2000      	movs	r0, #0
 800268c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800268e:	f000 f91b 	bl	80028c8 <__malloc_lock>
 8002692:	4921      	ldr	r1, [pc, #132]	; (8002718 <_malloc_r+0xac>)
 8002694:	680a      	ldr	r2, [r1, #0]
 8002696:	4614      	mov	r4, r2
 8002698:	b99c      	cbnz	r4, 80026c2 <_malloc_r+0x56>
 800269a:	4f20      	ldr	r7, [pc, #128]	; (800271c <_malloc_r+0xb0>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	b923      	cbnz	r3, 80026aa <_malloc_r+0x3e>
 80026a0:	4621      	mov	r1, r4
 80026a2:	4630      	mov	r0, r6
 80026a4:	f000 f854 	bl	8002750 <_sbrk_r>
 80026a8:	6038      	str	r0, [r7, #0]
 80026aa:	4629      	mov	r1, r5
 80026ac:	4630      	mov	r0, r6
 80026ae:	f000 f84f 	bl	8002750 <_sbrk_r>
 80026b2:	1c43      	adds	r3, r0, #1
 80026b4:	d123      	bne.n	80026fe <_malloc_r+0x92>
 80026b6:	230c      	movs	r3, #12
 80026b8:	4630      	mov	r0, r6
 80026ba:	6033      	str	r3, [r6, #0]
 80026bc:	f000 f90a 	bl	80028d4 <__malloc_unlock>
 80026c0:	e7e3      	b.n	800268a <_malloc_r+0x1e>
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	1b5b      	subs	r3, r3, r5
 80026c6:	d417      	bmi.n	80026f8 <_malloc_r+0x8c>
 80026c8:	2b0b      	cmp	r3, #11
 80026ca:	d903      	bls.n	80026d4 <_malloc_r+0x68>
 80026cc:	6023      	str	r3, [r4, #0]
 80026ce:	441c      	add	r4, r3
 80026d0:	6025      	str	r5, [r4, #0]
 80026d2:	e004      	b.n	80026de <_malloc_r+0x72>
 80026d4:	6863      	ldr	r3, [r4, #4]
 80026d6:	42a2      	cmp	r2, r4
 80026d8:	bf0c      	ite	eq
 80026da:	600b      	streq	r3, [r1, #0]
 80026dc:	6053      	strne	r3, [r2, #4]
 80026de:	4630      	mov	r0, r6
 80026e0:	f000 f8f8 	bl	80028d4 <__malloc_unlock>
 80026e4:	f104 000b 	add.w	r0, r4, #11
 80026e8:	1d23      	adds	r3, r4, #4
 80026ea:	f020 0007 	bic.w	r0, r0, #7
 80026ee:	1ac2      	subs	r2, r0, r3
 80026f0:	d0cc      	beq.n	800268c <_malloc_r+0x20>
 80026f2:	1a1b      	subs	r3, r3, r0
 80026f4:	50a3      	str	r3, [r4, r2]
 80026f6:	e7c9      	b.n	800268c <_malloc_r+0x20>
 80026f8:	4622      	mov	r2, r4
 80026fa:	6864      	ldr	r4, [r4, #4]
 80026fc:	e7cc      	b.n	8002698 <_malloc_r+0x2c>
 80026fe:	1cc4      	adds	r4, r0, #3
 8002700:	f024 0403 	bic.w	r4, r4, #3
 8002704:	42a0      	cmp	r0, r4
 8002706:	d0e3      	beq.n	80026d0 <_malloc_r+0x64>
 8002708:	1a21      	subs	r1, r4, r0
 800270a:	4630      	mov	r0, r6
 800270c:	f000 f820 	bl	8002750 <_sbrk_r>
 8002710:	3001      	adds	r0, #1
 8002712:	d1dd      	bne.n	80026d0 <_malloc_r+0x64>
 8002714:	e7cf      	b.n	80026b6 <_malloc_r+0x4a>
 8002716:	bf00      	nop
 8002718:	200001cc 	.word	0x200001cc
 800271c:	200001d0 	.word	0x200001d0

08002720 <iprintf>:
 8002720:	b40f      	push	{r0, r1, r2, r3}
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <iprintf+0x2c>)
 8002724:	b513      	push	{r0, r1, r4, lr}
 8002726:	681c      	ldr	r4, [r3, #0]
 8002728:	b124      	cbz	r4, 8002734 <iprintf+0x14>
 800272a:	69a3      	ldr	r3, [r4, #24]
 800272c:	b913      	cbnz	r3, 8002734 <iprintf+0x14>
 800272e:	4620      	mov	r0, r4
 8002730:	f7ff fe82 	bl	8002438 <__sinit>
 8002734:	ab05      	add	r3, sp, #20
 8002736:	4620      	mov	r0, r4
 8002738:	9a04      	ldr	r2, [sp, #16]
 800273a:	68a1      	ldr	r1, [r4, #8]
 800273c:	9301      	str	r3, [sp, #4]
 800273e:	f000 fa53 	bl	8002be8 <_vfiprintf_r>
 8002742:	b002      	add	sp, #8
 8002744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002748:	b004      	add	sp, #16
 800274a:	4770      	bx	lr
 800274c:	20000058 	.word	0x20000058

08002750 <_sbrk_r>:
 8002750:	b538      	push	{r3, r4, r5, lr}
 8002752:	2300      	movs	r3, #0
 8002754:	4d05      	ldr	r5, [pc, #20]	; (800276c <_sbrk_r+0x1c>)
 8002756:	4604      	mov	r4, r0
 8002758:	4608      	mov	r0, r1
 800275a:	602b      	str	r3, [r5, #0]
 800275c:	f7fd fe8e 	bl	800047c <_sbrk>
 8002760:	1c43      	adds	r3, r0, #1
 8002762:	d102      	bne.n	800276a <_sbrk_r+0x1a>
 8002764:	682b      	ldr	r3, [r5, #0]
 8002766:	b103      	cbz	r3, 800276a <_sbrk_r+0x1a>
 8002768:	6023      	str	r3, [r4, #0]
 800276a:	bd38      	pop	{r3, r4, r5, pc}
 800276c:	20000244 	.word	0x20000244

08002770 <sniprintf>:
 8002770:	b40c      	push	{r2, r3}
 8002772:	b530      	push	{r4, r5, lr}
 8002774:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <sniprintf+0x64>)
 8002776:	1e0c      	subs	r4, r1, #0
 8002778:	681d      	ldr	r5, [r3, #0]
 800277a:	b09d      	sub	sp, #116	; 0x74
 800277c:	da08      	bge.n	8002790 <sniprintf+0x20>
 800277e:	238b      	movs	r3, #139	; 0x8b
 8002780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002784:	602b      	str	r3, [r5, #0]
 8002786:	b01d      	add	sp, #116	; 0x74
 8002788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800278c:	b002      	add	sp, #8
 800278e:	4770      	bx	lr
 8002790:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002794:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002798:	bf0c      	ite	eq
 800279a:	4623      	moveq	r3, r4
 800279c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80027a0:	9304      	str	r3, [sp, #16]
 80027a2:	9307      	str	r3, [sp, #28]
 80027a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027a8:	9002      	str	r0, [sp, #8]
 80027aa:	9006      	str	r0, [sp, #24]
 80027ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80027b0:	4628      	mov	r0, r5
 80027b2:	ab21      	add	r3, sp, #132	; 0x84
 80027b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80027b6:	a902      	add	r1, sp, #8
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	f000 f8ed 	bl	8002998 <_svfiprintf_r>
 80027be:	1c43      	adds	r3, r0, #1
 80027c0:	bfbc      	itt	lt
 80027c2:	238b      	movlt	r3, #139	; 0x8b
 80027c4:	602b      	strlt	r3, [r5, #0]
 80027c6:	2c00      	cmp	r4, #0
 80027c8:	d0dd      	beq.n	8002786 <sniprintf+0x16>
 80027ca:	2200      	movs	r2, #0
 80027cc:	9b02      	ldr	r3, [sp, #8]
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e7d9      	b.n	8002786 <sniprintf+0x16>
 80027d2:	bf00      	nop
 80027d4:	20000058 	.word	0x20000058

080027d8 <__sread>:
 80027d8:	b510      	push	{r4, lr}
 80027da:	460c      	mov	r4, r1
 80027dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027e0:	f000 fcc8 	bl	8003174 <_read_r>
 80027e4:	2800      	cmp	r0, #0
 80027e6:	bfab      	itete	ge
 80027e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80027ea:	89a3      	ldrhlt	r3, [r4, #12]
 80027ec:	181b      	addge	r3, r3, r0
 80027ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80027f2:	bfac      	ite	ge
 80027f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80027f6:	81a3      	strhlt	r3, [r4, #12]
 80027f8:	bd10      	pop	{r4, pc}

080027fa <__swrite>:
 80027fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027fe:	461f      	mov	r7, r3
 8002800:	898b      	ldrh	r3, [r1, #12]
 8002802:	4605      	mov	r5, r0
 8002804:	05db      	lsls	r3, r3, #23
 8002806:	460c      	mov	r4, r1
 8002808:	4616      	mov	r6, r2
 800280a:	d505      	bpl.n	8002818 <__swrite+0x1e>
 800280c:	2302      	movs	r3, #2
 800280e:	2200      	movs	r2, #0
 8002810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002814:	f000 f846 	bl	80028a4 <_lseek_r>
 8002818:	89a3      	ldrh	r3, [r4, #12]
 800281a:	4632      	mov	r2, r6
 800281c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002820:	81a3      	strh	r3, [r4, #12]
 8002822:	4628      	mov	r0, r5
 8002824:	463b      	mov	r3, r7
 8002826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800282a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800282e:	f000 b817 	b.w	8002860 <_write_r>

08002832 <__sseek>:
 8002832:	b510      	push	{r4, lr}
 8002834:	460c      	mov	r4, r1
 8002836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800283a:	f000 f833 	bl	80028a4 <_lseek_r>
 800283e:	1c43      	adds	r3, r0, #1
 8002840:	89a3      	ldrh	r3, [r4, #12]
 8002842:	bf15      	itete	ne
 8002844:	6560      	strne	r0, [r4, #84]	; 0x54
 8002846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800284a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800284e:	81a3      	strheq	r3, [r4, #12]
 8002850:	bf18      	it	ne
 8002852:	81a3      	strhne	r3, [r4, #12]
 8002854:	bd10      	pop	{r4, pc}

08002856 <__sclose>:
 8002856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800285a:	f000 b813 	b.w	8002884 <_close_r>
	...

08002860 <_write_r>:
 8002860:	b538      	push	{r3, r4, r5, lr}
 8002862:	4604      	mov	r4, r0
 8002864:	4608      	mov	r0, r1
 8002866:	4611      	mov	r1, r2
 8002868:	2200      	movs	r2, #0
 800286a:	4d05      	ldr	r5, [pc, #20]	; (8002880 <_write_r+0x20>)
 800286c:	602a      	str	r2, [r5, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	f7ff faba 	bl	8001de8 <_write>
 8002874:	1c43      	adds	r3, r0, #1
 8002876:	d102      	bne.n	800287e <_write_r+0x1e>
 8002878:	682b      	ldr	r3, [r5, #0]
 800287a:	b103      	cbz	r3, 800287e <_write_r+0x1e>
 800287c:	6023      	str	r3, [r4, #0]
 800287e:	bd38      	pop	{r3, r4, r5, pc}
 8002880:	20000244 	.word	0x20000244

08002884 <_close_r>:
 8002884:	b538      	push	{r3, r4, r5, lr}
 8002886:	2300      	movs	r3, #0
 8002888:	4d05      	ldr	r5, [pc, #20]	; (80028a0 <_close_r+0x1c>)
 800288a:	4604      	mov	r4, r0
 800288c:	4608      	mov	r0, r1
 800288e:	602b      	str	r3, [r5, #0]
 8002890:	f7ff fad8 	bl	8001e44 <_close>
 8002894:	1c43      	adds	r3, r0, #1
 8002896:	d102      	bne.n	800289e <_close_r+0x1a>
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	b103      	cbz	r3, 800289e <_close_r+0x1a>
 800289c:	6023      	str	r3, [r4, #0]
 800289e:	bd38      	pop	{r3, r4, r5, pc}
 80028a0:	20000244 	.word	0x20000244

080028a4 <_lseek_r>:
 80028a4:	b538      	push	{r3, r4, r5, lr}
 80028a6:	4604      	mov	r4, r0
 80028a8:	4608      	mov	r0, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	2200      	movs	r2, #0
 80028ae:	4d05      	ldr	r5, [pc, #20]	; (80028c4 <_lseek_r+0x20>)
 80028b0:	602a      	str	r2, [r5, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f7ff fa86 	bl	8001dc4 <_lseek>
 80028b8:	1c43      	adds	r3, r0, #1
 80028ba:	d102      	bne.n	80028c2 <_lseek_r+0x1e>
 80028bc:	682b      	ldr	r3, [r5, #0]
 80028be:	b103      	cbz	r3, 80028c2 <_lseek_r+0x1e>
 80028c0:	6023      	str	r3, [r4, #0]
 80028c2:	bd38      	pop	{r3, r4, r5, pc}
 80028c4:	20000244 	.word	0x20000244

080028c8 <__malloc_lock>:
 80028c8:	4801      	ldr	r0, [pc, #4]	; (80028d0 <__malloc_lock+0x8>)
 80028ca:	f7ff be78 	b.w	80025be <__retarget_lock_acquire_recursive>
 80028ce:	bf00      	nop
 80028d0:	2000023c 	.word	0x2000023c

080028d4 <__malloc_unlock>:
 80028d4:	4801      	ldr	r0, [pc, #4]	; (80028dc <__malloc_unlock+0x8>)
 80028d6:	f7ff be73 	b.w	80025c0 <__retarget_lock_release_recursive>
 80028da:	bf00      	nop
 80028dc:	2000023c 	.word	0x2000023c

080028e0 <__ssputs_r>:
 80028e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028e4:	688e      	ldr	r6, [r1, #8]
 80028e6:	4682      	mov	sl, r0
 80028e8:	429e      	cmp	r6, r3
 80028ea:	460c      	mov	r4, r1
 80028ec:	4690      	mov	r8, r2
 80028ee:	461f      	mov	r7, r3
 80028f0:	d838      	bhi.n	8002964 <__ssputs_r+0x84>
 80028f2:	898a      	ldrh	r2, [r1, #12]
 80028f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80028f8:	d032      	beq.n	8002960 <__ssputs_r+0x80>
 80028fa:	6825      	ldr	r5, [r4, #0]
 80028fc:	6909      	ldr	r1, [r1, #16]
 80028fe:	3301      	adds	r3, #1
 8002900:	eba5 0901 	sub.w	r9, r5, r1
 8002904:	6965      	ldr	r5, [r4, #20]
 8002906:	444b      	add	r3, r9
 8002908:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800290c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002910:	106d      	asrs	r5, r5, #1
 8002912:	429d      	cmp	r5, r3
 8002914:	bf38      	it	cc
 8002916:	461d      	movcc	r5, r3
 8002918:	0553      	lsls	r3, r2, #21
 800291a:	d531      	bpl.n	8002980 <__ssputs_r+0xa0>
 800291c:	4629      	mov	r1, r5
 800291e:	f7ff fea5 	bl	800266c <_malloc_r>
 8002922:	4606      	mov	r6, r0
 8002924:	b950      	cbnz	r0, 800293c <__ssputs_r+0x5c>
 8002926:	230c      	movs	r3, #12
 8002928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800292c:	f8ca 3000 	str.w	r3, [sl]
 8002930:	89a3      	ldrh	r3, [r4, #12]
 8002932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002936:	81a3      	strh	r3, [r4, #12]
 8002938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800293c:	464a      	mov	r2, r9
 800293e:	6921      	ldr	r1, [r4, #16]
 8002940:	f000 fd5c 	bl	80033fc <memcpy>
 8002944:	89a3      	ldrh	r3, [r4, #12]
 8002946:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800294a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294e:	81a3      	strh	r3, [r4, #12]
 8002950:	6126      	str	r6, [r4, #16]
 8002952:	444e      	add	r6, r9
 8002954:	6026      	str	r6, [r4, #0]
 8002956:	463e      	mov	r6, r7
 8002958:	6165      	str	r5, [r4, #20]
 800295a:	eba5 0509 	sub.w	r5, r5, r9
 800295e:	60a5      	str	r5, [r4, #8]
 8002960:	42be      	cmp	r6, r7
 8002962:	d900      	bls.n	8002966 <__ssputs_r+0x86>
 8002964:	463e      	mov	r6, r7
 8002966:	4632      	mov	r2, r6
 8002968:	4641      	mov	r1, r8
 800296a:	6820      	ldr	r0, [r4, #0]
 800296c:	f000 fd54 	bl	8003418 <memmove>
 8002970:	68a3      	ldr	r3, [r4, #8]
 8002972:	6822      	ldr	r2, [r4, #0]
 8002974:	1b9b      	subs	r3, r3, r6
 8002976:	4432      	add	r2, r6
 8002978:	2000      	movs	r0, #0
 800297a:	60a3      	str	r3, [r4, #8]
 800297c:	6022      	str	r2, [r4, #0]
 800297e:	e7db      	b.n	8002938 <__ssputs_r+0x58>
 8002980:	462a      	mov	r2, r5
 8002982:	f000 fd63 	bl	800344c <_realloc_r>
 8002986:	4606      	mov	r6, r0
 8002988:	2800      	cmp	r0, #0
 800298a:	d1e1      	bne.n	8002950 <__ssputs_r+0x70>
 800298c:	4650      	mov	r0, sl
 800298e:	6921      	ldr	r1, [r4, #16]
 8002990:	f7ff fe20 	bl	80025d4 <_free_r>
 8002994:	e7c7      	b.n	8002926 <__ssputs_r+0x46>
	...

08002998 <_svfiprintf_r>:
 8002998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800299c:	4698      	mov	r8, r3
 800299e:	898b      	ldrh	r3, [r1, #12]
 80029a0:	4607      	mov	r7, r0
 80029a2:	061b      	lsls	r3, r3, #24
 80029a4:	460d      	mov	r5, r1
 80029a6:	4614      	mov	r4, r2
 80029a8:	b09d      	sub	sp, #116	; 0x74
 80029aa:	d50e      	bpl.n	80029ca <_svfiprintf_r+0x32>
 80029ac:	690b      	ldr	r3, [r1, #16]
 80029ae:	b963      	cbnz	r3, 80029ca <_svfiprintf_r+0x32>
 80029b0:	2140      	movs	r1, #64	; 0x40
 80029b2:	f7ff fe5b 	bl	800266c <_malloc_r>
 80029b6:	6028      	str	r0, [r5, #0]
 80029b8:	6128      	str	r0, [r5, #16]
 80029ba:	b920      	cbnz	r0, 80029c6 <_svfiprintf_r+0x2e>
 80029bc:	230c      	movs	r3, #12
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029c4:	e0d1      	b.n	8002b6a <_svfiprintf_r+0x1d2>
 80029c6:	2340      	movs	r3, #64	; 0x40
 80029c8:	616b      	str	r3, [r5, #20]
 80029ca:	2300      	movs	r3, #0
 80029cc:	9309      	str	r3, [sp, #36]	; 0x24
 80029ce:	2320      	movs	r3, #32
 80029d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029d4:	2330      	movs	r3, #48	; 0x30
 80029d6:	f04f 0901 	mov.w	r9, #1
 80029da:	f8cd 800c 	str.w	r8, [sp, #12]
 80029de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002b84 <_svfiprintf_r+0x1ec>
 80029e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029e6:	4623      	mov	r3, r4
 80029e8:	469a      	mov	sl, r3
 80029ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029ee:	b10a      	cbz	r2, 80029f4 <_svfiprintf_r+0x5c>
 80029f0:	2a25      	cmp	r2, #37	; 0x25
 80029f2:	d1f9      	bne.n	80029e8 <_svfiprintf_r+0x50>
 80029f4:	ebba 0b04 	subs.w	fp, sl, r4
 80029f8:	d00b      	beq.n	8002a12 <_svfiprintf_r+0x7a>
 80029fa:	465b      	mov	r3, fp
 80029fc:	4622      	mov	r2, r4
 80029fe:	4629      	mov	r1, r5
 8002a00:	4638      	mov	r0, r7
 8002a02:	f7ff ff6d 	bl	80028e0 <__ssputs_r>
 8002a06:	3001      	adds	r0, #1
 8002a08:	f000 80aa 	beq.w	8002b60 <_svfiprintf_r+0x1c8>
 8002a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a0e:	445a      	add	r2, fp
 8002a10:	9209      	str	r2, [sp, #36]	; 0x24
 8002a12:	f89a 3000 	ldrb.w	r3, [sl]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80a2 	beq.w	8002b60 <_svfiprintf_r+0x1c8>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a26:	f10a 0a01 	add.w	sl, sl, #1
 8002a2a:	9304      	str	r3, [sp, #16]
 8002a2c:	9307      	str	r3, [sp, #28]
 8002a2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a32:	931a      	str	r3, [sp, #104]	; 0x68
 8002a34:	4654      	mov	r4, sl
 8002a36:	2205      	movs	r2, #5
 8002a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a3c:	4851      	ldr	r0, [pc, #324]	; (8002b84 <_svfiprintf_r+0x1ec>)
 8002a3e:	f000 fccf 	bl	80033e0 <memchr>
 8002a42:	9a04      	ldr	r2, [sp, #16]
 8002a44:	b9d8      	cbnz	r0, 8002a7e <_svfiprintf_r+0xe6>
 8002a46:	06d0      	lsls	r0, r2, #27
 8002a48:	bf44      	itt	mi
 8002a4a:	2320      	movmi	r3, #32
 8002a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a50:	0711      	lsls	r1, r2, #28
 8002a52:	bf44      	itt	mi
 8002a54:	232b      	movmi	r3, #43	; 0x2b
 8002a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8002a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a60:	d015      	beq.n	8002a8e <_svfiprintf_r+0xf6>
 8002a62:	4654      	mov	r4, sl
 8002a64:	2000      	movs	r0, #0
 8002a66:	f04f 0c0a 	mov.w	ip, #10
 8002a6a:	9a07      	ldr	r2, [sp, #28]
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a72:	3b30      	subs	r3, #48	; 0x30
 8002a74:	2b09      	cmp	r3, #9
 8002a76:	d94e      	bls.n	8002b16 <_svfiprintf_r+0x17e>
 8002a78:	b1b0      	cbz	r0, 8002aa8 <_svfiprintf_r+0x110>
 8002a7a:	9207      	str	r2, [sp, #28]
 8002a7c:	e014      	b.n	8002aa8 <_svfiprintf_r+0x110>
 8002a7e:	eba0 0308 	sub.w	r3, r0, r8
 8002a82:	fa09 f303 	lsl.w	r3, r9, r3
 8002a86:	4313      	orrs	r3, r2
 8002a88:	46a2      	mov	sl, r4
 8002a8a:	9304      	str	r3, [sp, #16]
 8002a8c:	e7d2      	b.n	8002a34 <_svfiprintf_r+0x9c>
 8002a8e:	9b03      	ldr	r3, [sp, #12]
 8002a90:	1d19      	adds	r1, r3, #4
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	9103      	str	r1, [sp, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bfbb      	ittet	lt
 8002a9a:	425b      	neglt	r3, r3
 8002a9c:	f042 0202 	orrlt.w	r2, r2, #2
 8002aa0:	9307      	strge	r3, [sp, #28]
 8002aa2:	9307      	strlt	r3, [sp, #28]
 8002aa4:	bfb8      	it	lt
 8002aa6:	9204      	strlt	r2, [sp, #16]
 8002aa8:	7823      	ldrb	r3, [r4, #0]
 8002aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8002aac:	d10c      	bne.n	8002ac8 <_svfiprintf_r+0x130>
 8002aae:	7863      	ldrb	r3, [r4, #1]
 8002ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ab2:	d135      	bne.n	8002b20 <_svfiprintf_r+0x188>
 8002ab4:	9b03      	ldr	r3, [sp, #12]
 8002ab6:	3402      	adds	r4, #2
 8002ab8:	1d1a      	adds	r2, r3, #4
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	9203      	str	r2, [sp, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bfb8      	it	lt
 8002ac2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002ac6:	9305      	str	r3, [sp, #20]
 8002ac8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002b94 <_svfiprintf_r+0x1fc>
 8002acc:	2203      	movs	r2, #3
 8002ace:	4650      	mov	r0, sl
 8002ad0:	7821      	ldrb	r1, [r4, #0]
 8002ad2:	f000 fc85 	bl	80033e0 <memchr>
 8002ad6:	b140      	cbz	r0, 8002aea <_svfiprintf_r+0x152>
 8002ad8:	2340      	movs	r3, #64	; 0x40
 8002ada:	eba0 000a 	sub.w	r0, r0, sl
 8002ade:	fa03 f000 	lsl.w	r0, r3, r0
 8002ae2:	9b04      	ldr	r3, [sp, #16]
 8002ae4:	3401      	adds	r4, #1
 8002ae6:	4303      	orrs	r3, r0
 8002ae8:	9304      	str	r3, [sp, #16]
 8002aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aee:	2206      	movs	r2, #6
 8002af0:	4825      	ldr	r0, [pc, #148]	; (8002b88 <_svfiprintf_r+0x1f0>)
 8002af2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002af6:	f000 fc73 	bl	80033e0 <memchr>
 8002afa:	2800      	cmp	r0, #0
 8002afc:	d038      	beq.n	8002b70 <_svfiprintf_r+0x1d8>
 8002afe:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <_svfiprintf_r+0x1f4>)
 8002b00:	bb1b      	cbnz	r3, 8002b4a <_svfiprintf_r+0x1b2>
 8002b02:	9b03      	ldr	r3, [sp, #12]
 8002b04:	3307      	adds	r3, #7
 8002b06:	f023 0307 	bic.w	r3, r3, #7
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	9303      	str	r3, [sp, #12]
 8002b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b10:	4433      	add	r3, r6
 8002b12:	9309      	str	r3, [sp, #36]	; 0x24
 8002b14:	e767      	b.n	80029e6 <_svfiprintf_r+0x4e>
 8002b16:	460c      	mov	r4, r1
 8002b18:	2001      	movs	r0, #1
 8002b1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b1e:	e7a5      	b.n	8002a6c <_svfiprintf_r+0xd4>
 8002b20:	2300      	movs	r3, #0
 8002b22:	f04f 0c0a 	mov.w	ip, #10
 8002b26:	4619      	mov	r1, r3
 8002b28:	3401      	adds	r4, #1
 8002b2a:	9305      	str	r3, [sp, #20]
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b32:	3a30      	subs	r2, #48	; 0x30
 8002b34:	2a09      	cmp	r2, #9
 8002b36:	d903      	bls.n	8002b40 <_svfiprintf_r+0x1a8>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0c5      	beq.n	8002ac8 <_svfiprintf_r+0x130>
 8002b3c:	9105      	str	r1, [sp, #20]
 8002b3e:	e7c3      	b.n	8002ac8 <_svfiprintf_r+0x130>
 8002b40:	4604      	mov	r4, r0
 8002b42:	2301      	movs	r3, #1
 8002b44:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b48:	e7f0      	b.n	8002b2c <_svfiprintf_r+0x194>
 8002b4a:	ab03      	add	r3, sp, #12
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	462a      	mov	r2, r5
 8002b50:	4638      	mov	r0, r7
 8002b52:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <_svfiprintf_r+0x1f8>)
 8002b54:	a904      	add	r1, sp, #16
 8002b56:	f3af 8000 	nop.w
 8002b5a:	1c42      	adds	r2, r0, #1
 8002b5c:	4606      	mov	r6, r0
 8002b5e:	d1d6      	bne.n	8002b0e <_svfiprintf_r+0x176>
 8002b60:	89ab      	ldrh	r3, [r5, #12]
 8002b62:	065b      	lsls	r3, r3, #25
 8002b64:	f53f af2c 	bmi.w	80029c0 <_svfiprintf_r+0x28>
 8002b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b6a:	b01d      	add	sp, #116	; 0x74
 8002b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b70:	ab03      	add	r3, sp, #12
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	462a      	mov	r2, r5
 8002b76:	4638      	mov	r0, r7
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <_svfiprintf_r+0x1f8>)
 8002b7a:	a904      	add	r1, sp, #16
 8002b7c:	f000 f9d4 	bl	8002f28 <_printf_i>
 8002b80:	e7eb      	b.n	8002b5a <_svfiprintf_r+0x1c2>
 8002b82:	bf00      	nop
 8002b84:	08003828 	.word	0x08003828
 8002b88:	08003832 	.word	0x08003832
 8002b8c:	00000000 	.word	0x00000000
 8002b90:	080028e1 	.word	0x080028e1
 8002b94:	0800382e 	.word	0x0800382e

08002b98 <__sfputc_r>:
 8002b98:	6893      	ldr	r3, [r2, #8]
 8002b9a:	b410      	push	{r4}
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	6093      	str	r3, [r2, #8]
 8002ba2:	da07      	bge.n	8002bb4 <__sfputc_r+0x1c>
 8002ba4:	6994      	ldr	r4, [r2, #24]
 8002ba6:	42a3      	cmp	r3, r4
 8002ba8:	db01      	blt.n	8002bae <__sfputc_r+0x16>
 8002baa:	290a      	cmp	r1, #10
 8002bac:	d102      	bne.n	8002bb4 <__sfputc_r+0x1c>
 8002bae:	bc10      	pop	{r4}
 8002bb0:	f000 baf2 	b.w	8003198 <__swbuf_r>
 8002bb4:	6813      	ldr	r3, [r2, #0]
 8002bb6:	1c58      	adds	r0, r3, #1
 8002bb8:	6010      	str	r0, [r2, #0]
 8002bba:	7019      	strb	r1, [r3, #0]
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	bc10      	pop	{r4}
 8002bc0:	4770      	bx	lr

08002bc2 <__sfputs_r>:
 8002bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc4:	4606      	mov	r6, r0
 8002bc6:	460f      	mov	r7, r1
 8002bc8:	4614      	mov	r4, r2
 8002bca:	18d5      	adds	r5, r2, r3
 8002bcc:	42ac      	cmp	r4, r5
 8002bce:	d101      	bne.n	8002bd4 <__sfputs_r+0x12>
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	e007      	b.n	8002be4 <__sfputs_r+0x22>
 8002bd4:	463a      	mov	r2, r7
 8002bd6:	4630      	mov	r0, r6
 8002bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bdc:	f7ff ffdc 	bl	8002b98 <__sfputc_r>
 8002be0:	1c43      	adds	r3, r0, #1
 8002be2:	d1f3      	bne.n	8002bcc <__sfputs_r+0xa>
 8002be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002be8 <_vfiprintf_r>:
 8002be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bec:	460d      	mov	r5, r1
 8002bee:	4614      	mov	r4, r2
 8002bf0:	4698      	mov	r8, r3
 8002bf2:	4606      	mov	r6, r0
 8002bf4:	b09d      	sub	sp, #116	; 0x74
 8002bf6:	b118      	cbz	r0, 8002c00 <_vfiprintf_r+0x18>
 8002bf8:	6983      	ldr	r3, [r0, #24]
 8002bfa:	b90b      	cbnz	r3, 8002c00 <_vfiprintf_r+0x18>
 8002bfc:	f7ff fc1c 	bl	8002438 <__sinit>
 8002c00:	4b89      	ldr	r3, [pc, #548]	; (8002e28 <_vfiprintf_r+0x240>)
 8002c02:	429d      	cmp	r5, r3
 8002c04:	d11b      	bne.n	8002c3e <_vfiprintf_r+0x56>
 8002c06:	6875      	ldr	r5, [r6, #4]
 8002c08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c0a:	07d9      	lsls	r1, r3, #31
 8002c0c:	d405      	bmi.n	8002c1a <_vfiprintf_r+0x32>
 8002c0e:	89ab      	ldrh	r3, [r5, #12]
 8002c10:	059a      	lsls	r2, r3, #22
 8002c12:	d402      	bmi.n	8002c1a <_vfiprintf_r+0x32>
 8002c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c16:	f7ff fcd2 	bl	80025be <__retarget_lock_acquire_recursive>
 8002c1a:	89ab      	ldrh	r3, [r5, #12]
 8002c1c:	071b      	lsls	r3, r3, #28
 8002c1e:	d501      	bpl.n	8002c24 <_vfiprintf_r+0x3c>
 8002c20:	692b      	ldr	r3, [r5, #16]
 8002c22:	b9eb      	cbnz	r3, 8002c60 <_vfiprintf_r+0x78>
 8002c24:	4629      	mov	r1, r5
 8002c26:	4630      	mov	r0, r6
 8002c28:	f000 fb08 	bl	800323c <__swsetup_r>
 8002c2c:	b1c0      	cbz	r0, 8002c60 <_vfiprintf_r+0x78>
 8002c2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c30:	07dc      	lsls	r4, r3, #31
 8002c32:	d50e      	bpl.n	8002c52 <_vfiprintf_r+0x6a>
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c38:	b01d      	add	sp, #116	; 0x74
 8002c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c3e:	4b7b      	ldr	r3, [pc, #492]	; (8002e2c <_vfiprintf_r+0x244>)
 8002c40:	429d      	cmp	r5, r3
 8002c42:	d101      	bne.n	8002c48 <_vfiprintf_r+0x60>
 8002c44:	68b5      	ldr	r5, [r6, #8]
 8002c46:	e7df      	b.n	8002c08 <_vfiprintf_r+0x20>
 8002c48:	4b79      	ldr	r3, [pc, #484]	; (8002e30 <_vfiprintf_r+0x248>)
 8002c4a:	429d      	cmp	r5, r3
 8002c4c:	bf08      	it	eq
 8002c4e:	68f5      	ldreq	r5, [r6, #12]
 8002c50:	e7da      	b.n	8002c08 <_vfiprintf_r+0x20>
 8002c52:	89ab      	ldrh	r3, [r5, #12]
 8002c54:	0598      	lsls	r0, r3, #22
 8002c56:	d4ed      	bmi.n	8002c34 <_vfiprintf_r+0x4c>
 8002c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c5a:	f7ff fcb1 	bl	80025c0 <__retarget_lock_release_recursive>
 8002c5e:	e7e9      	b.n	8002c34 <_vfiprintf_r+0x4c>
 8002c60:	2300      	movs	r3, #0
 8002c62:	9309      	str	r3, [sp, #36]	; 0x24
 8002c64:	2320      	movs	r3, #32
 8002c66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c6a:	2330      	movs	r3, #48	; 0x30
 8002c6c:	f04f 0901 	mov.w	r9, #1
 8002c70:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c74:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002e34 <_vfiprintf_r+0x24c>
 8002c78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c7c:	4623      	mov	r3, r4
 8002c7e:	469a      	mov	sl, r3
 8002c80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c84:	b10a      	cbz	r2, 8002c8a <_vfiprintf_r+0xa2>
 8002c86:	2a25      	cmp	r2, #37	; 0x25
 8002c88:	d1f9      	bne.n	8002c7e <_vfiprintf_r+0x96>
 8002c8a:	ebba 0b04 	subs.w	fp, sl, r4
 8002c8e:	d00b      	beq.n	8002ca8 <_vfiprintf_r+0xc0>
 8002c90:	465b      	mov	r3, fp
 8002c92:	4622      	mov	r2, r4
 8002c94:	4629      	mov	r1, r5
 8002c96:	4630      	mov	r0, r6
 8002c98:	f7ff ff93 	bl	8002bc2 <__sfputs_r>
 8002c9c:	3001      	adds	r0, #1
 8002c9e:	f000 80aa 	beq.w	8002df6 <_vfiprintf_r+0x20e>
 8002ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ca4:	445a      	add	r2, fp
 8002ca6:	9209      	str	r2, [sp, #36]	; 0x24
 8002ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80a2 	beq.w	8002df6 <_vfiprintf_r+0x20e>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cbc:	f10a 0a01 	add.w	sl, sl, #1
 8002cc0:	9304      	str	r3, [sp, #16]
 8002cc2:	9307      	str	r3, [sp, #28]
 8002cc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cc8:	931a      	str	r3, [sp, #104]	; 0x68
 8002cca:	4654      	mov	r4, sl
 8002ccc:	2205      	movs	r2, #5
 8002cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cd2:	4858      	ldr	r0, [pc, #352]	; (8002e34 <_vfiprintf_r+0x24c>)
 8002cd4:	f000 fb84 	bl	80033e0 <memchr>
 8002cd8:	9a04      	ldr	r2, [sp, #16]
 8002cda:	b9d8      	cbnz	r0, 8002d14 <_vfiprintf_r+0x12c>
 8002cdc:	06d1      	lsls	r1, r2, #27
 8002cde:	bf44      	itt	mi
 8002ce0:	2320      	movmi	r3, #32
 8002ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ce6:	0713      	lsls	r3, r2, #28
 8002ce8:	bf44      	itt	mi
 8002cea:	232b      	movmi	r3, #43	; 0x2b
 8002cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8002cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8002cf6:	d015      	beq.n	8002d24 <_vfiprintf_r+0x13c>
 8002cf8:	4654      	mov	r4, sl
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f04f 0c0a 	mov.w	ip, #10
 8002d00:	9a07      	ldr	r2, [sp, #28]
 8002d02:	4621      	mov	r1, r4
 8002d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d08:	3b30      	subs	r3, #48	; 0x30
 8002d0a:	2b09      	cmp	r3, #9
 8002d0c:	d94e      	bls.n	8002dac <_vfiprintf_r+0x1c4>
 8002d0e:	b1b0      	cbz	r0, 8002d3e <_vfiprintf_r+0x156>
 8002d10:	9207      	str	r2, [sp, #28]
 8002d12:	e014      	b.n	8002d3e <_vfiprintf_r+0x156>
 8002d14:	eba0 0308 	sub.w	r3, r0, r8
 8002d18:	fa09 f303 	lsl.w	r3, r9, r3
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	46a2      	mov	sl, r4
 8002d20:	9304      	str	r3, [sp, #16]
 8002d22:	e7d2      	b.n	8002cca <_vfiprintf_r+0xe2>
 8002d24:	9b03      	ldr	r3, [sp, #12]
 8002d26:	1d19      	adds	r1, r3, #4
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	9103      	str	r1, [sp, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bfbb      	ittet	lt
 8002d30:	425b      	neglt	r3, r3
 8002d32:	f042 0202 	orrlt.w	r2, r2, #2
 8002d36:	9307      	strge	r3, [sp, #28]
 8002d38:	9307      	strlt	r3, [sp, #28]
 8002d3a:	bfb8      	it	lt
 8002d3c:	9204      	strlt	r2, [sp, #16]
 8002d3e:	7823      	ldrb	r3, [r4, #0]
 8002d40:	2b2e      	cmp	r3, #46	; 0x2e
 8002d42:	d10c      	bne.n	8002d5e <_vfiprintf_r+0x176>
 8002d44:	7863      	ldrb	r3, [r4, #1]
 8002d46:	2b2a      	cmp	r3, #42	; 0x2a
 8002d48:	d135      	bne.n	8002db6 <_vfiprintf_r+0x1ce>
 8002d4a:	9b03      	ldr	r3, [sp, #12]
 8002d4c:	3402      	adds	r4, #2
 8002d4e:	1d1a      	adds	r2, r3, #4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	9203      	str	r2, [sp, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bfb8      	it	lt
 8002d58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d5c:	9305      	str	r3, [sp, #20]
 8002d5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002e44 <_vfiprintf_r+0x25c>
 8002d62:	2203      	movs	r2, #3
 8002d64:	4650      	mov	r0, sl
 8002d66:	7821      	ldrb	r1, [r4, #0]
 8002d68:	f000 fb3a 	bl	80033e0 <memchr>
 8002d6c:	b140      	cbz	r0, 8002d80 <_vfiprintf_r+0x198>
 8002d6e:	2340      	movs	r3, #64	; 0x40
 8002d70:	eba0 000a 	sub.w	r0, r0, sl
 8002d74:	fa03 f000 	lsl.w	r0, r3, r0
 8002d78:	9b04      	ldr	r3, [sp, #16]
 8002d7a:	3401      	adds	r4, #1
 8002d7c:	4303      	orrs	r3, r0
 8002d7e:	9304      	str	r3, [sp, #16]
 8002d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d84:	2206      	movs	r2, #6
 8002d86:	482c      	ldr	r0, [pc, #176]	; (8002e38 <_vfiprintf_r+0x250>)
 8002d88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d8c:	f000 fb28 	bl	80033e0 <memchr>
 8002d90:	2800      	cmp	r0, #0
 8002d92:	d03f      	beq.n	8002e14 <_vfiprintf_r+0x22c>
 8002d94:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <_vfiprintf_r+0x254>)
 8002d96:	bb1b      	cbnz	r3, 8002de0 <_vfiprintf_r+0x1f8>
 8002d98:	9b03      	ldr	r3, [sp, #12]
 8002d9a:	3307      	adds	r3, #7
 8002d9c:	f023 0307 	bic.w	r3, r3, #7
 8002da0:	3308      	adds	r3, #8
 8002da2:	9303      	str	r3, [sp, #12]
 8002da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002da6:	443b      	add	r3, r7
 8002da8:	9309      	str	r3, [sp, #36]	; 0x24
 8002daa:	e767      	b.n	8002c7c <_vfiprintf_r+0x94>
 8002dac:	460c      	mov	r4, r1
 8002dae:	2001      	movs	r0, #1
 8002db0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002db4:	e7a5      	b.n	8002d02 <_vfiprintf_r+0x11a>
 8002db6:	2300      	movs	r3, #0
 8002db8:	f04f 0c0a 	mov.w	ip, #10
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	3401      	adds	r4, #1
 8002dc0:	9305      	str	r3, [sp, #20]
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dc8:	3a30      	subs	r2, #48	; 0x30
 8002dca:	2a09      	cmp	r2, #9
 8002dcc:	d903      	bls.n	8002dd6 <_vfiprintf_r+0x1ee>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0c5      	beq.n	8002d5e <_vfiprintf_r+0x176>
 8002dd2:	9105      	str	r1, [sp, #20]
 8002dd4:	e7c3      	b.n	8002d5e <_vfiprintf_r+0x176>
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	2301      	movs	r3, #1
 8002dda:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dde:	e7f0      	b.n	8002dc2 <_vfiprintf_r+0x1da>
 8002de0:	ab03      	add	r3, sp, #12
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	462a      	mov	r2, r5
 8002de6:	4630      	mov	r0, r6
 8002de8:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <_vfiprintf_r+0x258>)
 8002dea:	a904      	add	r1, sp, #16
 8002dec:	f3af 8000 	nop.w
 8002df0:	4607      	mov	r7, r0
 8002df2:	1c78      	adds	r0, r7, #1
 8002df4:	d1d6      	bne.n	8002da4 <_vfiprintf_r+0x1bc>
 8002df6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002df8:	07d9      	lsls	r1, r3, #31
 8002dfa:	d405      	bmi.n	8002e08 <_vfiprintf_r+0x220>
 8002dfc:	89ab      	ldrh	r3, [r5, #12]
 8002dfe:	059a      	lsls	r2, r3, #22
 8002e00:	d402      	bmi.n	8002e08 <_vfiprintf_r+0x220>
 8002e02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e04:	f7ff fbdc 	bl	80025c0 <__retarget_lock_release_recursive>
 8002e08:	89ab      	ldrh	r3, [r5, #12]
 8002e0a:	065b      	lsls	r3, r3, #25
 8002e0c:	f53f af12 	bmi.w	8002c34 <_vfiprintf_r+0x4c>
 8002e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e12:	e711      	b.n	8002c38 <_vfiprintf_r+0x50>
 8002e14:	ab03      	add	r3, sp, #12
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	462a      	mov	r2, r5
 8002e1a:	4630      	mov	r0, r6
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <_vfiprintf_r+0x258>)
 8002e1e:	a904      	add	r1, sp, #16
 8002e20:	f000 f882 	bl	8002f28 <_printf_i>
 8002e24:	e7e4      	b.n	8002df0 <_vfiprintf_r+0x208>
 8002e26:	bf00      	nop
 8002e28:	080037e4 	.word	0x080037e4
 8002e2c:	08003804 	.word	0x08003804
 8002e30:	080037c4 	.word	0x080037c4
 8002e34:	08003828 	.word	0x08003828
 8002e38:	08003832 	.word	0x08003832
 8002e3c:	00000000 	.word	0x00000000
 8002e40:	08002bc3 	.word	0x08002bc3
 8002e44:	0800382e 	.word	0x0800382e

08002e48 <_printf_common>:
 8002e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e4c:	4616      	mov	r6, r2
 8002e4e:	4699      	mov	r9, r3
 8002e50:	688a      	ldr	r2, [r1, #8]
 8002e52:	690b      	ldr	r3, [r1, #16]
 8002e54:	4607      	mov	r7, r0
 8002e56:	4293      	cmp	r3, r2
 8002e58:	bfb8      	it	lt
 8002e5a:	4613      	movlt	r3, r2
 8002e5c:	6033      	str	r3, [r6, #0]
 8002e5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e62:	460c      	mov	r4, r1
 8002e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e68:	b10a      	cbz	r2, 8002e6e <_printf_common+0x26>
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	6033      	str	r3, [r6, #0]
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	0699      	lsls	r1, r3, #26
 8002e72:	bf42      	ittt	mi
 8002e74:	6833      	ldrmi	r3, [r6, #0]
 8002e76:	3302      	addmi	r3, #2
 8002e78:	6033      	strmi	r3, [r6, #0]
 8002e7a:	6825      	ldr	r5, [r4, #0]
 8002e7c:	f015 0506 	ands.w	r5, r5, #6
 8002e80:	d106      	bne.n	8002e90 <_printf_common+0x48>
 8002e82:	f104 0a19 	add.w	sl, r4, #25
 8002e86:	68e3      	ldr	r3, [r4, #12]
 8002e88:	6832      	ldr	r2, [r6, #0]
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	42ab      	cmp	r3, r5
 8002e8e:	dc28      	bgt.n	8002ee2 <_printf_common+0x9a>
 8002e90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e94:	1e13      	subs	r3, r2, #0
 8002e96:	6822      	ldr	r2, [r4, #0]
 8002e98:	bf18      	it	ne
 8002e9a:	2301      	movne	r3, #1
 8002e9c:	0692      	lsls	r2, r2, #26
 8002e9e:	d42d      	bmi.n	8002efc <_printf_common+0xb4>
 8002ea0:	4649      	mov	r1, r9
 8002ea2:	4638      	mov	r0, r7
 8002ea4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ea8:	47c0      	blx	r8
 8002eaa:	3001      	adds	r0, #1
 8002eac:	d020      	beq.n	8002ef0 <_printf_common+0xa8>
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	68e5      	ldr	r5, [r4, #12]
 8002eb2:	f003 0306 	and.w	r3, r3, #6
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	bf18      	it	ne
 8002eba:	2500      	movne	r5, #0
 8002ebc:	6832      	ldr	r2, [r6, #0]
 8002ebe:	f04f 0600 	mov.w	r6, #0
 8002ec2:	68a3      	ldr	r3, [r4, #8]
 8002ec4:	bf08      	it	eq
 8002ec6:	1aad      	subeq	r5, r5, r2
 8002ec8:	6922      	ldr	r2, [r4, #16]
 8002eca:	bf08      	it	eq
 8002ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	bfc4      	itt	gt
 8002ed4:	1a9b      	subgt	r3, r3, r2
 8002ed6:	18ed      	addgt	r5, r5, r3
 8002ed8:	341a      	adds	r4, #26
 8002eda:	42b5      	cmp	r5, r6
 8002edc:	d11a      	bne.n	8002f14 <_printf_common+0xcc>
 8002ede:	2000      	movs	r0, #0
 8002ee0:	e008      	b.n	8002ef4 <_printf_common+0xac>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	4652      	mov	r2, sl
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	4638      	mov	r0, r7
 8002eea:	47c0      	blx	r8
 8002eec:	3001      	adds	r0, #1
 8002eee:	d103      	bne.n	8002ef8 <_printf_common+0xb0>
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ef8:	3501      	adds	r5, #1
 8002efa:	e7c4      	b.n	8002e86 <_printf_common+0x3e>
 8002efc:	2030      	movs	r0, #48	; 0x30
 8002efe:	18e1      	adds	r1, r4, r3
 8002f00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f0a:	4422      	add	r2, r4
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f12:	e7c5      	b.n	8002ea0 <_printf_common+0x58>
 8002f14:	2301      	movs	r3, #1
 8002f16:	4622      	mov	r2, r4
 8002f18:	4649      	mov	r1, r9
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	47c0      	blx	r8
 8002f1e:	3001      	adds	r0, #1
 8002f20:	d0e6      	beq.n	8002ef0 <_printf_common+0xa8>
 8002f22:	3601      	adds	r6, #1
 8002f24:	e7d9      	b.n	8002eda <_printf_common+0x92>
	...

08002f28 <_printf_i>:
 8002f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f2c:	460c      	mov	r4, r1
 8002f2e:	7e27      	ldrb	r7, [r4, #24]
 8002f30:	4691      	mov	r9, r2
 8002f32:	2f78      	cmp	r7, #120	; 0x78
 8002f34:	4680      	mov	r8, r0
 8002f36:	469a      	mov	sl, r3
 8002f38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f3e:	d807      	bhi.n	8002f50 <_printf_i+0x28>
 8002f40:	2f62      	cmp	r7, #98	; 0x62
 8002f42:	d80a      	bhi.n	8002f5a <_printf_i+0x32>
 8002f44:	2f00      	cmp	r7, #0
 8002f46:	f000 80d9 	beq.w	80030fc <_printf_i+0x1d4>
 8002f4a:	2f58      	cmp	r7, #88	; 0x58
 8002f4c:	f000 80a4 	beq.w	8003098 <_printf_i+0x170>
 8002f50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f58:	e03a      	b.n	8002fd0 <_printf_i+0xa8>
 8002f5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f5e:	2b15      	cmp	r3, #21
 8002f60:	d8f6      	bhi.n	8002f50 <_printf_i+0x28>
 8002f62:	a001      	add	r0, pc, #4	; (adr r0, 8002f68 <_printf_i+0x40>)
 8002f64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002f68:	08002fc1 	.word	0x08002fc1
 8002f6c:	08002fd5 	.word	0x08002fd5
 8002f70:	08002f51 	.word	0x08002f51
 8002f74:	08002f51 	.word	0x08002f51
 8002f78:	08002f51 	.word	0x08002f51
 8002f7c:	08002f51 	.word	0x08002f51
 8002f80:	08002fd5 	.word	0x08002fd5
 8002f84:	08002f51 	.word	0x08002f51
 8002f88:	08002f51 	.word	0x08002f51
 8002f8c:	08002f51 	.word	0x08002f51
 8002f90:	08002f51 	.word	0x08002f51
 8002f94:	080030e3 	.word	0x080030e3
 8002f98:	08003005 	.word	0x08003005
 8002f9c:	080030c5 	.word	0x080030c5
 8002fa0:	08002f51 	.word	0x08002f51
 8002fa4:	08002f51 	.word	0x08002f51
 8002fa8:	08003105 	.word	0x08003105
 8002fac:	08002f51 	.word	0x08002f51
 8002fb0:	08003005 	.word	0x08003005
 8002fb4:	08002f51 	.word	0x08002f51
 8002fb8:	08002f51 	.word	0x08002f51
 8002fbc:	080030cd 	.word	0x080030cd
 8002fc0:	680b      	ldr	r3, [r1, #0]
 8002fc2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002fc6:	1d1a      	adds	r2, r3, #4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	600a      	str	r2, [r1, #0]
 8002fcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0a4      	b.n	800311e <_printf_i+0x1f6>
 8002fd4:	6825      	ldr	r5, [r4, #0]
 8002fd6:	6808      	ldr	r0, [r1, #0]
 8002fd8:	062e      	lsls	r6, r5, #24
 8002fda:	f100 0304 	add.w	r3, r0, #4
 8002fde:	d50a      	bpl.n	8002ff6 <_printf_i+0xce>
 8002fe0:	6805      	ldr	r5, [r0, #0]
 8002fe2:	600b      	str	r3, [r1, #0]
 8002fe4:	2d00      	cmp	r5, #0
 8002fe6:	da03      	bge.n	8002ff0 <_printf_i+0xc8>
 8002fe8:	232d      	movs	r3, #45	; 0x2d
 8002fea:	426d      	negs	r5, r5
 8002fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ff0:	230a      	movs	r3, #10
 8002ff2:	485e      	ldr	r0, [pc, #376]	; (800316c <_printf_i+0x244>)
 8002ff4:	e019      	b.n	800302a <_printf_i+0x102>
 8002ff6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002ffa:	6805      	ldr	r5, [r0, #0]
 8002ffc:	600b      	str	r3, [r1, #0]
 8002ffe:	bf18      	it	ne
 8003000:	b22d      	sxthne	r5, r5
 8003002:	e7ef      	b.n	8002fe4 <_printf_i+0xbc>
 8003004:	680b      	ldr	r3, [r1, #0]
 8003006:	6825      	ldr	r5, [r4, #0]
 8003008:	1d18      	adds	r0, r3, #4
 800300a:	6008      	str	r0, [r1, #0]
 800300c:	0628      	lsls	r0, r5, #24
 800300e:	d501      	bpl.n	8003014 <_printf_i+0xec>
 8003010:	681d      	ldr	r5, [r3, #0]
 8003012:	e002      	b.n	800301a <_printf_i+0xf2>
 8003014:	0669      	lsls	r1, r5, #25
 8003016:	d5fb      	bpl.n	8003010 <_printf_i+0xe8>
 8003018:	881d      	ldrh	r5, [r3, #0]
 800301a:	2f6f      	cmp	r7, #111	; 0x6f
 800301c:	bf0c      	ite	eq
 800301e:	2308      	moveq	r3, #8
 8003020:	230a      	movne	r3, #10
 8003022:	4852      	ldr	r0, [pc, #328]	; (800316c <_printf_i+0x244>)
 8003024:	2100      	movs	r1, #0
 8003026:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800302a:	6866      	ldr	r6, [r4, #4]
 800302c:	2e00      	cmp	r6, #0
 800302e:	bfa8      	it	ge
 8003030:	6821      	ldrge	r1, [r4, #0]
 8003032:	60a6      	str	r6, [r4, #8]
 8003034:	bfa4      	itt	ge
 8003036:	f021 0104 	bicge.w	r1, r1, #4
 800303a:	6021      	strge	r1, [r4, #0]
 800303c:	b90d      	cbnz	r5, 8003042 <_printf_i+0x11a>
 800303e:	2e00      	cmp	r6, #0
 8003040:	d04d      	beq.n	80030de <_printf_i+0x1b6>
 8003042:	4616      	mov	r6, r2
 8003044:	fbb5 f1f3 	udiv	r1, r5, r3
 8003048:	fb03 5711 	mls	r7, r3, r1, r5
 800304c:	5dc7      	ldrb	r7, [r0, r7]
 800304e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003052:	462f      	mov	r7, r5
 8003054:	42bb      	cmp	r3, r7
 8003056:	460d      	mov	r5, r1
 8003058:	d9f4      	bls.n	8003044 <_printf_i+0x11c>
 800305a:	2b08      	cmp	r3, #8
 800305c:	d10b      	bne.n	8003076 <_printf_i+0x14e>
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	07df      	lsls	r7, r3, #31
 8003062:	d508      	bpl.n	8003076 <_printf_i+0x14e>
 8003064:	6923      	ldr	r3, [r4, #16]
 8003066:	6861      	ldr	r1, [r4, #4]
 8003068:	4299      	cmp	r1, r3
 800306a:	bfde      	ittt	le
 800306c:	2330      	movle	r3, #48	; 0x30
 800306e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003072:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003076:	1b92      	subs	r2, r2, r6
 8003078:	6122      	str	r2, [r4, #16]
 800307a:	464b      	mov	r3, r9
 800307c:	4621      	mov	r1, r4
 800307e:	4640      	mov	r0, r8
 8003080:	f8cd a000 	str.w	sl, [sp]
 8003084:	aa03      	add	r2, sp, #12
 8003086:	f7ff fedf 	bl	8002e48 <_printf_common>
 800308a:	3001      	adds	r0, #1
 800308c:	d14c      	bne.n	8003128 <_printf_i+0x200>
 800308e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003092:	b004      	add	sp, #16
 8003094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003098:	4834      	ldr	r0, [pc, #208]	; (800316c <_printf_i+0x244>)
 800309a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800309e:	680e      	ldr	r6, [r1, #0]
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80030a6:	061f      	lsls	r7, r3, #24
 80030a8:	600e      	str	r6, [r1, #0]
 80030aa:	d514      	bpl.n	80030d6 <_printf_i+0x1ae>
 80030ac:	07d9      	lsls	r1, r3, #31
 80030ae:	bf44      	itt	mi
 80030b0:	f043 0320 	orrmi.w	r3, r3, #32
 80030b4:	6023      	strmi	r3, [r4, #0]
 80030b6:	b91d      	cbnz	r5, 80030c0 <_printf_i+0x198>
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	f023 0320 	bic.w	r3, r3, #32
 80030be:	6023      	str	r3, [r4, #0]
 80030c0:	2310      	movs	r3, #16
 80030c2:	e7af      	b.n	8003024 <_printf_i+0xfc>
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	f043 0320 	orr.w	r3, r3, #32
 80030ca:	6023      	str	r3, [r4, #0]
 80030cc:	2378      	movs	r3, #120	; 0x78
 80030ce:	4828      	ldr	r0, [pc, #160]	; (8003170 <_printf_i+0x248>)
 80030d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030d4:	e7e3      	b.n	800309e <_printf_i+0x176>
 80030d6:	065e      	lsls	r6, r3, #25
 80030d8:	bf48      	it	mi
 80030da:	b2ad      	uxthmi	r5, r5
 80030dc:	e7e6      	b.n	80030ac <_printf_i+0x184>
 80030de:	4616      	mov	r6, r2
 80030e0:	e7bb      	b.n	800305a <_printf_i+0x132>
 80030e2:	680b      	ldr	r3, [r1, #0]
 80030e4:	6826      	ldr	r6, [r4, #0]
 80030e6:	1d1d      	adds	r5, r3, #4
 80030e8:	6960      	ldr	r0, [r4, #20]
 80030ea:	600d      	str	r5, [r1, #0]
 80030ec:	0635      	lsls	r5, r6, #24
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	d501      	bpl.n	80030f6 <_printf_i+0x1ce>
 80030f2:	6018      	str	r0, [r3, #0]
 80030f4:	e002      	b.n	80030fc <_printf_i+0x1d4>
 80030f6:	0671      	lsls	r1, r6, #25
 80030f8:	d5fb      	bpl.n	80030f2 <_printf_i+0x1ca>
 80030fa:	8018      	strh	r0, [r3, #0]
 80030fc:	2300      	movs	r3, #0
 80030fe:	4616      	mov	r6, r2
 8003100:	6123      	str	r3, [r4, #16]
 8003102:	e7ba      	b.n	800307a <_printf_i+0x152>
 8003104:	680b      	ldr	r3, [r1, #0]
 8003106:	1d1a      	adds	r2, r3, #4
 8003108:	600a      	str	r2, [r1, #0]
 800310a:	681e      	ldr	r6, [r3, #0]
 800310c:	2100      	movs	r1, #0
 800310e:	4630      	mov	r0, r6
 8003110:	6862      	ldr	r2, [r4, #4]
 8003112:	f000 f965 	bl	80033e0 <memchr>
 8003116:	b108      	cbz	r0, 800311c <_printf_i+0x1f4>
 8003118:	1b80      	subs	r0, r0, r6
 800311a:	6060      	str	r0, [r4, #4]
 800311c:	6863      	ldr	r3, [r4, #4]
 800311e:	6123      	str	r3, [r4, #16]
 8003120:	2300      	movs	r3, #0
 8003122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003126:	e7a8      	b.n	800307a <_printf_i+0x152>
 8003128:	4632      	mov	r2, r6
 800312a:	4649      	mov	r1, r9
 800312c:	4640      	mov	r0, r8
 800312e:	6923      	ldr	r3, [r4, #16]
 8003130:	47d0      	blx	sl
 8003132:	3001      	adds	r0, #1
 8003134:	d0ab      	beq.n	800308e <_printf_i+0x166>
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	079b      	lsls	r3, r3, #30
 800313a:	d413      	bmi.n	8003164 <_printf_i+0x23c>
 800313c:	68e0      	ldr	r0, [r4, #12]
 800313e:	9b03      	ldr	r3, [sp, #12]
 8003140:	4298      	cmp	r0, r3
 8003142:	bfb8      	it	lt
 8003144:	4618      	movlt	r0, r3
 8003146:	e7a4      	b.n	8003092 <_printf_i+0x16a>
 8003148:	2301      	movs	r3, #1
 800314a:	4632      	mov	r2, r6
 800314c:	4649      	mov	r1, r9
 800314e:	4640      	mov	r0, r8
 8003150:	47d0      	blx	sl
 8003152:	3001      	adds	r0, #1
 8003154:	d09b      	beq.n	800308e <_printf_i+0x166>
 8003156:	3501      	adds	r5, #1
 8003158:	68e3      	ldr	r3, [r4, #12]
 800315a:	9903      	ldr	r1, [sp, #12]
 800315c:	1a5b      	subs	r3, r3, r1
 800315e:	42ab      	cmp	r3, r5
 8003160:	dcf2      	bgt.n	8003148 <_printf_i+0x220>
 8003162:	e7eb      	b.n	800313c <_printf_i+0x214>
 8003164:	2500      	movs	r5, #0
 8003166:	f104 0619 	add.w	r6, r4, #25
 800316a:	e7f5      	b.n	8003158 <_printf_i+0x230>
 800316c:	08003839 	.word	0x08003839
 8003170:	0800384a 	.word	0x0800384a

08003174 <_read_r>:
 8003174:	b538      	push	{r3, r4, r5, lr}
 8003176:	4604      	mov	r4, r0
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	2200      	movs	r2, #0
 800317e:	4d05      	ldr	r5, [pc, #20]	; (8003194 <_read_r+0x20>)
 8003180:	602a      	str	r2, [r5, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	f7fe fdc8 	bl	8001d18 <_read>
 8003188:	1c43      	adds	r3, r0, #1
 800318a:	d102      	bne.n	8003192 <_read_r+0x1e>
 800318c:	682b      	ldr	r3, [r5, #0]
 800318e:	b103      	cbz	r3, 8003192 <_read_r+0x1e>
 8003190:	6023      	str	r3, [r4, #0]
 8003192:	bd38      	pop	{r3, r4, r5, pc}
 8003194:	20000244 	.word	0x20000244

08003198 <__swbuf_r>:
 8003198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319a:	460e      	mov	r6, r1
 800319c:	4614      	mov	r4, r2
 800319e:	4605      	mov	r5, r0
 80031a0:	b118      	cbz	r0, 80031aa <__swbuf_r+0x12>
 80031a2:	6983      	ldr	r3, [r0, #24]
 80031a4:	b90b      	cbnz	r3, 80031aa <__swbuf_r+0x12>
 80031a6:	f7ff f947 	bl	8002438 <__sinit>
 80031aa:	4b21      	ldr	r3, [pc, #132]	; (8003230 <__swbuf_r+0x98>)
 80031ac:	429c      	cmp	r4, r3
 80031ae:	d12b      	bne.n	8003208 <__swbuf_r+0x70>
 80031b0:	686c      	ldr	r4, [r5, #4]
 80031b2:	69a3      	ldr	r3, [r4, #24]
 80031b4:	60a3      	str	r3, [r4, #8]
 80031b6:	89a3      	ldrh	r3, [r4, #12]
 80031b8:	071a      	lsls	r2, r3, #28
 80031ba:	d52f      	bpl.n	800321c <__swbuf_r+0x84>
 80031bc:	6923      	ldr	r3, [r4, #16]
 80031be:	b36b      	cbz	r3, 800321c <__swbuf_r+0x84>
 80031c0:	6923      	ldr	r3, [r4, #16]
 80031c2:	6820      	ldr	r0, [r4, #0]
 80031c4:	b2f6      	uxtb	r6, r6
 80031c6:	1ac0      	subs	r0, r0, r3
 80031c8:	6963      	ldr	r3, [r4, #20]
 80031ca:	4637      	mov	r7, r6
 80031cc:	4283      	cmp	r3, r0
 80031ce:	dc04      	bgt.n	80031da <__swbuf_r+0x42>
 80031d0:	4621      	mov	r1, r4
 80031d2:	4628      	mov	r0, r5
 80031d4:	f7ff f88a 	bl	80022ec <_fflush_r>
 80031d8:	bb30      	cbnz	r0, 8003228 <__swbuf_r+0x90>
 80031da:	68a3      	ldr	r3, [r4, #8]
 80031dc:	3001      	adds	r0, #1
 80031de:	3b01      	subs	r3, #1
 80031e0:	60a3      	str	r3, [r4, #8]
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	6022      	str	r2, [r4, #0]
 80031e8:	701e      	strb	r6, [r3, #0]
 80031ea:	6963      	ldr	r3, [r4, #20]
 80031ec:	4283      	cmp	r3, r0
 80031ee:	d004      	beq.n	80031fa <__swbuf_r+0x62>
 80031f0:	89a3      	ldrh	r3, [r4, #12]
 80031f2:	07db      	lsls	r3, r3, #31
 80031f4:	d506      	bpl.n	8003204 <__swbuf_r+0x6c>
 80031f6:	2e0a      	cmp	r6, #10
 80031f8:	d104      	bne.n	8003204 <__swbuf_r+0x6c>
 80031fa:	4621      	mov	r1, r4
 80031fc:	4628      	mov	r0, r5
 80031fe:	f7ff f875 	bl	80022ec <_fflush_r>
 8003202:	b988      	cbnz	r0, 8003228 <__swbuf_r+0x90>
 8003204:	4638      	mov	r0, r7
 8003206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <__swbuf_r+0x9c>)
 800320a:	429c      	cmp	r4, r3
 800320c:	d101      	bne.n	8003212 <__swbuf_r+0x7a>
 800320e:	68ac      	ldr	r4, [r5, #8]
 8003210:	e7cf      	b.n	80031b2 <__swbuf_r+0x1a>
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <__swbuf_r+0xa0>)
 8003214:	429c      	cmp	r4, r3
 8003216:	bf08      	it	eq
 8003218:	68ec      	ldreq	r4, [r5, #12]
 800321a:	e7ca      	b.n	80031b2 <__swbuf_r+0x1a>
 800321c:	4621      	mov	r1, r4
 800321e:	4628      	mov	r0, r5
 8003220:	f000 f80c 	bl	800323c <__swsetup_r>
 8003224:	2800      	cmp	r0, #0
 8003226:	d0cb      	beq.n	80031c0 <__swbuf_r+0x28>
 8003228:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800322c:	e7ea      	b.n	8003204 <__swbuf_r+0x6c>
 800322e:	bf00      	nop
 8003230:	080037e4 	.word	0x080037e4
 8003234:	08003804 	.word	0x08003804
 8003238:	080037c4 	.word	0x080037c4

0800323c <__swsetup_r>:
 800323c:	4b32      	ldr	r3, [pc, #200]	; (8003308 <__swsetup_r+0xcc>)
 800323e:	b570      	push	{r4, r5, r6, lr}
 8003240:	681d      	ldr	r5, [r3, #0]
 8003242:	4606      	mov	r6, r0
 8003244:	460c      	mov	r4, r1
 8003246:	b125      	cbz	r5, 8003252 <__swsetup_r+0x16>
 8003248:	69ab      	ldr	r3, [r5, #24]
 800324a:	b913      	cbnz	r3, 8003252 <__swsetup_r+0x16>
 800324c:	4628      	mov	r0, r5
 800324e:	f7ff f8f3 	bl	8002438 <__sinit>
 8003252:	4b2e      	ldr	r3, [pc, #184]	; (800330c <__swsetup_r+0xd0>)
 8003254:	429c      	cmp	r4, r3
 8003256:	d10f      	bne.n	8003278 <__swsetup_r+0x3c>
 8003258:	686c      	ldr	r4, [r5, #4]
 800325a:	89a3      	ldrh	r3, [r4, #12]
 800325c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003260:	0719      	lsls	r1, r3, #28
 8003262:	d42c      	bmi.n	80032be <__swsetup_r+0x82>
 8003264:	06dd      	lsls	r5, r3, #27
 8003266:	d411      	bmi.n	800328c <__swsetup_r+0x50>
 8003268:	2309      	movs	r3, #9
 800326a:	6033      	str	r3, [r6, #0]
 800326c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003274:	81a3      	strh	r3, [r4, #12]
 8003276:	e03e      	b.n	80032f6 <__swsetup_r+0xba>
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <__swsetup_r+0xd4>)
 800327a:	429c      	cmp	r4, r3
 800327c:	d101      	bne.n	8003282 <__swsetup_r+0x46>
 800327e:	68ac      	ldr	r4, [r5, #8]
 8003280:	e7eb      	b.n	800325a <__swsetup_r+0x1e>
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <__swsetup_r+0xd8>)
 8003284:	429c      	cmp	r4, r3
 8003286:	bf08      	it	eq
 8003288:	68ec      	ldreq	r4, [r5, #12]
 800328a:	e7e6      	b.n	800325a <__swsetup_r+0x1e>
 800328c:	0758      	lsls	r0, r3, #29
 800328e:	d512      	bpl.n	80032b6 <__swsetup_r+0x7a>
 8003290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003292:	b141      	cbz	r1, 80032a6 <__swsetup_r+0x6a>
 8003294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003298:	4299      	cmp	r1, r3
 800329a:	d002      	beq.n	80032a2 <__swsetup_r+0x66>
 800329c:	4630      	mov	r0, r6
 800329e:	f7ff f999 	bl	80025d4 <_free_r>
 80032a2:	2300      	movs	r3, #0
 80032a4:	6363      	str	r3, [r4, #52]	; 0x34
 80032a6:	89a3      	ldrh	r3, [r4, #12]
 80032a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032ac:	81a3      	strh	r3, [r4, #12]
 80032ae:	2300      	movs	r3, #0
 80032b0:	6063      	str	r3, [r4, #4]
 80032b2:	6923      	ldr	r3, [r4, #16]
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	f043 0308 	orr.w	r3, r3, #8
 80032bc:	81a3      	strh	r3, [r4, #12]
 80032be:	6923      	ldr	r3, [r4, #16]
 80032c0:	b94b      	cbnz	r3, 80032d6 <__swsetup_r+0x9a>
 80032c2:	89a3      	ldrh	r3, [r4, #12]
 80032c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032cc:	d003      	beq.n	80032d6 <__swsetup_r+0x9a>
 80032ce:	4621      	mov	r1, r4
 80032d0:	4630      	mov	r0, r6
 80032d2:	f000 f845 	bl	8003360 <__smakebuf_r>
 80032d6:	89a0      	ldrh	r0, [r4, #12]
 80032d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032dc:	f010 0301 	ands.w	r3, r0, #1
 80032e0:	d00a      	beq.n	80032f8 <__swsetup_r+0xbc>
 80032e2:	2300      	movs	r3, #0
 80032e4:	60a3      	str	r3, [r4, #8]
 80032e6:	6963      	ldr	r3, [r4, #20]
 80032e8:	425b      	negs	r3, r3
 80032ea:	61a3      	str	r3, [r4, #24]
 80032ec:	6923      	ldr	r3, [r4, #16]
 80032ee:	b943      	cbnz	r3, 8003302 <__swsetup_r+0xc6>
 80032f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032f4:	d1ba      	bne.n	800326c <__swsetup_r+0x30>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	0781      	lsls	r1, r0, #30
 80032fa:	bf58      	it	pl
 80032fc:	6963      	ldrpl	r3, [r4, #20]
 80032fe:	60a3      	str	r3, [r4, #8]
 8003300:	e7f4      	b.n	80032ec <__swsetup_r+0xb0>
 8003302:	2000      	movs	r0, #0
 8003304:	e7f7      	b.n	80032f6 <__swsetup_r+0xba>
 8003306:	bf00      	nop
 8003308:	20000058 	.word	0x20000058
 800330c:	080037e4 	.word	0x080037e4
 8003310:	08003804 	.word	0x08003804
 8003314:	080037c4 	.word	0x080037c4

08003318 <__swhatbuf_r>:
 8003318:	b570      	push	{r4, r5, r6, lr}
 800331a:	460e      	mov	r6, r1
 800331c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003320:	4614      	mov	r4, r2
 8003322:	2900      	cmp	r1, #0
 8003324:	461d      	mov	r5, r3
 8003326:	b096      	sub	sp, #88	; 0x58
 8003328:	da07      	bge.n	800333a <__swhatbuf_r+0x22>
 800332a:	2300      	movs	r3, #0
 800332c:	602b      	str	r3, [r5, #0]
 800332e:	89b3      	ldrh	r3, [r6, #12]
 8003330:	061a      	lsls	r2, r3, #24
 8003332:	d410      	bmi.n	8003356 <__swhatbuf_r+0x3e>
 8003334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003338:	e00e      	b.n	8003358 <__swhatbuf_r+0x40>
 800333a:	466a      	mov	r2, sp
 800333c:	f000 f8ac 	bl	8003498 <_fstat_r>
 8003340:	2800      	cmp	r0, #0
 8003342:	dbf2      	blt.n	800332a <__swhatbuf_r+0x12>
 8003344:	9a01      	ldr	r2, [sp, #4]
 8003346:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800334a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800334e:	425a      	negs	r2, r3
 8003350:	415a      	adcs	r2, r3
 8003352:	602a      	str	r2, [r5, #0]
 8003354:	e7ee      	b.n	8003334 <__swhatbuf_r+0x1c>
 8003356:	2340      	movs	r3, #64	; 0x40
 8003358:	2000      	movs	r0, #0
 800335a:	6023      	str	r3, [r4, #0]
 800335c:	b016      	add	sp, #88	; 0x58
 800335e:	bd70      	pop	{r4, r5, r6, pc}

08003360 <__smakebuf_r>:
 8003360:	898b      	ldrh	r3, [r1, #12]
 8003362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003364:	079d      	lsls	r5, r3, #30
 8003366:	4606      	mov	r6, r0
 8003368:	460c      	mov	r4, r1
 800336a:	d507      	bpl.n	800337c <__smakebuf_r+0x1c>
 800336c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003370:	6023      	str	r3, [r4, #0]
 8003372:	6123      	str	r3, [r4, #16]
 8003374:	2301      	movs	r3, #1
 8003376:	6163      	str	r3, [r4, #20]
 8003378:	b002      	add	sp, #8
 800337a:	bd70      	pop	{r4, r5, r6, pc}
 800337c:	466a      	mov	r2, sp
 800337e:	ab01      	add	r3, sp, #4
 8003380:	f7ff ffca 	bl	8003318 <__swhatbuf_r>
 8003384:	9900      	ldr	r1, [sp, #0]
 8003386:	4605      	mov	r5, r0
 8003388:	4630      	mov	r0, r6
 800338a:	f7ff f96f 	bl	800266c <_malloc_r>
 800338e:	b948      	cbnz	r0, 80033a4 <__smakebuf_r+0x44>
 8003390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003394:	059a      	lsls	r2, r3, #22
 8003396:	d4ef      	bmi.n	8003378 <__smakebuf_r+0x18>
 8003398:	f023 0303 	bic.w	r3, r3, #3
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	81a3      	strh	r3, [r4, #12]
 80033a2:	e7e3      	b.n	800336c <__smakebuf_r+0xc>
 80033a4:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <__smakebuf_r+0x7c>)
 80033a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80033a8:	89a3      	ldrh	r3, [r4, #12]
 80033aa:	6020      	str	r0, [r4, #0]
 80033ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b0:	81a3      	strh	r3, [r4, #12]
 80033b2:	9b00      	ldr	r3, [sp, #0]
 80033b4:	6120      	str	r0, [r4, #16]
 80033b6:	6163      	str	r3, [r4, #20]
 80033b8:	9b01      	ldr	r3, [sp, #4]
 80033ba:	b15b      	cbz	r3, 80033d4 <__smakebuf_r+0x74>
 80033bc:	4630      	mov	r0, r6
 80033be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033c2:	f000 f87b 	bl	80034bc <_isatty_r>
 80033c6:	b128      	cbz	r0, 80033d4 <__smakebuf_r+0x74>
 80033c8:	89a3      	ldrh	r3, [r4, #12]
 80033ca:	f023 0303 	bic.w	r3, r3, #3
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	81a3      	strh	r3, [r4, #12]
 80033d4:	89a0      	ldrh	r0, [r4, #12]
 80033d6:	4305      	orrs	r5, r0
 80033d8:	81a5      	strh	r5, [r4, #12]
 80033da:	e7cd      	b.n	8003378 <__smakebuf_r+0x18>
 80033dc:	080023d1 	.word	0x080023d1

080033e0 <memchr>:
 80033e0:	4603      	mov	r3, r0
 80033e2:	b510      	push	{r4, lr}
 80033e4:	b2c9      	uxtb	r1, r1
 80033e6:	4402      	add	r2, r0
 80033e8:	4293      	cmp	r3, r2
 80033ea:	4618      	mov	r0, r3
 80033ec:	d101      	bne.n	80033f2 <memchr+0x12>
 80033ee:	2000      	movs	r0, #0
 80033f0:	e003      	b.n	80033fa <memchr+0x1a>
 80033f2:	7804      	ldrb	r4, [r0, #0]
 80033f4:	3301      	adds	r3, #1
 80033f6:	428c      	cmp	r4, r1
 80033f8:	d1f6      	bne.n	80033e8 <memchr+0x8>
 80033fa:	bd10      	pop	{r4, pc}

080033fc <memcpy>:
 80033fc:	440a      	add	r2, r1
 80033fe:	4291      	cmp	r1, r2
 8003400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003404:	d100      	bne.n	8003408 <memcpy+0xc>
 8003406:	4770      	bx	lr
 8003408:	b510      	push	{r4, lr}
 800340a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800340e:	4291      	cmp	r1, r2
 8003410:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003414:	d1f9      	bne.n	800340a <memcpy+0xe>
 8003416:	bd10      	pop	{r4, pc}

08003418 <memmove>:
 8003418:	4288      	cmp	r0, r1
 800341a:	b510      	push	{r4, lr}
 800341c:	eb01 0402 	add.w	r4, r1, r2
 8003420:	d902      	bls.n	8003428 <memmove+0x10>
 8003422:	4284      	cmp	r4, r0
 8003424:	4623      	mov	r3, r4
 8003426:	d807      	bhi.n	8003438 <memmove+0x20>
 8003428:	1e43      	subs	r3, r0, #1
 800342a:	42a1      	cmp	r1, r4
 800342c:	d008      	beq.n	8003440 <memmove+0x28>
 800342e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003432:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003436:	e7f8      	b.n	800342a <memmove+0x12>
 8003438:	4601      	mov	r1, r0
 800343a:	4402      	add	r2, r0
 800343c:	428a      	cmp	r2, r1
 800343e:	d100      	bne.n	8003442 <memmove+0x2a>
 8003440:	bd10      	pop	{r4, pc}
 8003442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800344a:	e7f7      	b.n	800343c <memmove+0x24>

0800344c <_realloc_r>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	4607      	mov	r7, r0
 8003450:	4614      	mov	r4, r2
 8003452:	460e      	mov	r6, r1
 8003454:	b921      	cbnz	r1, 8003460 <_realloc_r+0x14>
 8003456:	4611      	mov	r1, r2
 8003458:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800345c:	f7ff b906 	b.w	800266c <_malloc_r>
 8003460:	b922      	cbnz	r2, 800346c <_realloc_r+0x20>
 8003462:	f7ff f8b7 	bl	80025d4 <_free_r>
 8003466:	4625      	mov	r5, r4
 8003468:	4628      	mov	r0, r5
 800346a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800346c:	f000 f836 	bl	80034dc <_malloc_usable_size_r>
 8003470:	42a0      	cmp	r0, r4
 8003472:	d20f      	bcs.n	8003494 <_realloc_r+0x48>
 8003474:	4621      	mov	r1, r4
 8003476:	4638      	mov	r0, r7
 8003478:	f7ff f8f8 	bl	800266c <_malloc_r>
 800347c:	4605      	mov	r5, r0
 800347e:	2800      	cmp	r0, #0
 8003480:	d0f2      	beq.n	8003468 <_realloc_r+0x1c>
 8003482:	4631      	mov	r1, r6
 8003484:	4622      	mov	r2, r4
 8003486:	f7ff ffb9 	bl	80033fc <memcpy>
 800348a:	4631      	mov	r1, r6
 800348c:	4638      	mov	r0, r7
 800348e:	f7ff f8a1 	bl	80025d4 <_free_r>
 8003492:	e7e9      	b.n	8003468 <_realloc_r+0x1c>
 8003494:	4635      	mov	r5, r6
 8003496:	e7e7      	b.n	8003468 <_realloc_r+0x1c>

08003498 <_fstat_r>:
 8003498:	b538      	push	{r3, r4, r5, lr}
 800349a:	2300      	movs	r3, #0
 800349c:	4d06      	ldr	r5, [pc, #24]	; (80034b8 <_fstat_r+0x20>)
 800349e:	4604      	mov	r4, r0
 80034a0:	4608      	mov	r0, r1
 80034a2:	4611      	mov	r1, r2
 80034a4:	602b      	str	r3, [r5, #0]
 80034a6:	f7fe fd14 	bl	8001ed2 <_fstat>
 80034aa:	1c43      	adds	r3, r0, #1
 80034ac:	d102      	bne.n	80034b4 <_fstat_r+0x1c>
 80034ae:	682b      	ldr	r3, [r5, #0]
 80034b0:	b103      	cbz	r3, 80034b4 <_fstat_r+0x1c>
 80034b2:	6023      	str	r3, [r4, #0]
 80034b4:	bd38      	pop	{r3, r4, r5, pc}
 80034b6:	bf00      	nop
 80034b8:	20000244 	.word	0x20000244

080034bc <_isatty_r>:
 80034bc:	b538      	push	{r3, r4, r5, lr}
 80034be:	2300      	movs	r3, #0
 80034c0:	4d05      	ldr	r5, [pc, #20]	; (80034d8 <_isatty_r+0x1c>)
 80034c2:	4604      	mov	r4, r0
 80034c4:	4608      	mov	r0, r1
 80034c6:	602b      	str	r3, [r5, #0]
 80034c8:	f7fe fe68 	bl	800219c <_isatty>
 80034cc:	1c43      	adds	r3, r0, #1
 80034ce:	d102      	bne.n	80034d6 <_isatty_r+0x1a>
 80034d0:	682b      	ldr	r3, [r5, #0]
 80034d2:	b103      	cbz	r3, 80034d6 <_isatty_r+0x1a>
 80034d4:	6023      	str	r3, [r4, #0]
 80034d6:	bd38      	pop	{r3, r4, r5, pc}
 80034d8:	20000244 	.word	0x20000244

080034dc <_malloc_usable_size_r>:
 80034dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034e0:	1f18      	subs	r0, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bfbc      	itt	lt
 80034e6:	580b      	ldrlt	r3, [r1, r0]
 80034e8:	18c0      	addlt	r0, r0, r3
 80034ea:	4770      	bx	lr

080034ec <_init>:
 80034ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ee:	bf00      	nop
 80034f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f2:	bc08      	pop	{r3}
 80034f4:	469e      	mov	lr, r3
 80034f6:	4770      	bx	lr

080034f8 <_fini>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	bf00      	nop
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr
